{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/angular-material.module.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/authentication.service.ts","webpack:///src/app/booklist/booklist.component.ts","webpack:///src/app/booklist/booklist.component.html","webpack:///src/app/booklist/booklist-entry-update-dialog.html","webpack:///src/app/booklist/booklist-entry-delete-dialog.html","webpack:///src/app/books.service.ts","webpack:///src/app/home/home.component.ts","webpack:///src/app/home/home.component.html","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/profile/profile.component.ts","webpack:///src/app/profile/profile.component.html","webpack:///src/app/register/register.component.ts","webpack:///src/app/register/register.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","materialModules","AngularMaterialModule","imports","routes","path","component","AppRoutingModule","forRoot","auth","AppComponent","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","AuthenticationService","http","router","token","localStorage","setItem","getItem","method","uri","user","base$","post","get","headers","Authorization","getToken","request","pipe","data","saveToken","window","removeItem","navigateByUrl","payload","split","atob","JSON","parse","getUserDetails","exp","Date","now","providedIn","BooklistComponent","fb","book","dialog","stats","completed","dropped","onHold","reading","planToRead","pagesRead","averageRating","ratings","value","text","checkboxes","formControlName","color","statusOrder","Map","getBooklist","profile","subscribe","setBookList","bookList","updateStats","sort","a","b","status","filter","entry","canDisplay","removeHTMLTags","str","replace","filters","group","addBookFormGroup","title","rating","currentPage","review","startDate","endDate","set","onChanges","valueChanges","userInput","searchBookByTitle","books","newBookOptions","volumeInfo","titleSelected","bookToAdd","reset","booklistEntryToAdd","volumeId","currentPageCount","pageCount","addToUserBooklist","res","removeFromUserBooklist","updateBooklistEntry","dialogRef","open","deleteEntryVerificationDialog","width","height","afterClosed","shouldDelete","removeBookFromUserList","updateEntryDialog","updatedEntry","length","getPagesRead","getAverageRating","total","forEach","totalRating","numberOfRatings","Math","round","toFixed","addBookToUserList","updatedEntryFormGroup","vId","close","cancel","updateEntry","deleteEntry","BooksService","params","booklistEntry","notes","put","delete","HomeComponent","err","console","log","LoginComponent","credentials","email","password","login","error","ProfileComponent","details","RegisterComponent","name","register","environment","production","catch"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatNativeDateModule, MatRippleModule } from '@angular/material/core';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTreeModule } from '@angular/material/tree';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatDialogModule } from '@angular/material/dialog';\n\nconst materialModules = [\n  CdkTreeModule,\n  MatAutocompleteModule,\n  MatButtonModule,\n  MatCardModule,\n  MatCheckboxModule,\n  MatChipsModule,\n  MatDividerModule,\n  MatExpansionModule,\n  MatIconModule,\n  MatInputModule,\n  MatListModule,\n  MatMenuModule,\n  MatProgressSpinnerModule,\n  MatPaginatorModule,\n  MatRippleModule,\n  MatSelectModule,\n  MatSidenavModule,\n  MatSnackBarModule,\n  MatSortModule,\n  MatTableModule,\n  MatTabsModule,\n  MatToolbarModule,\n  MatFormFieldModule,\n  MatButtonToggleModule,\n  MatTreeModule,\n  OverlayModule,\n  PortalModule,\n  MatBadgeModule,\n  MatGridListModule,\n  MatRadioModule,\n  MatDatepickerModule,\n  MatTooltipModule,\n  MatNativeDateModule,\n  MatDialogModule,\n];\n\n@NgModule({\n  imports: [CommonModule, ...materialModules],\n  exports: [...materialModules],\n})\nexport class AngularMaterialModule {}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { ProfileComponent } from './profile/profile.component';\nimport { BooklistComponent } from './booklist/booklist.component';\n\nconst routes: Routes = [\n  { path: '', component: HomeComponent },\n  { path: 'login', component: LoginComponent },\n  { path: 'register', component: RegisterComponent },\n  { path: 'profile', component: ProfileComponent },\n  { path: 'my-list', component: BooklistComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import { Component } from '@angular/core';\nimport { AuthenticationService } from './authentication.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {\n  constructor(public auth: AuthenticationService) {}\n}\n","<mat-toolbar color=\"primary\">\n  <mat-toolbar-row>\n    <h1 [routerLink]=\"'/'\">Book Hero</h1>\n    <span class=\"menu-spacer\"></span>\n    <div fxShow=\"true\" fxFlex fxLayout>\n      <div fxFlex>\n        <a mat-button *ngIf=\"!auth.isLoggedIn()\" [routerLink]=\"'/login'\"\n          >Log in</a\n        >\n        <a mat-button *ngIf=\"!auth.isLoggedIn()\" [routerLink]=\"'/register'\"\n          >Sign up</a\n        >\n\n        <a mat-button *ngIf=\"auth.isLoggedIn()\" [routerLink]=\"'/my-list'\"\n          >My List</a\n        >\n        <a mat-button *ngIf=\"auth.isLoggedIn()\" [routerLink]=\"'/timeline'\"\n          >Timeline</a\n        >\n        <a mat-button *ngIf=\"auth.isLoggedIn()\" [routerLink]=\"'/friends'\"\n          >Friends</a\n        >\n      </div>\n      <div fxFlex fxLayoutAlign=\"flex-end center\">\n        <a mat-button *ngIf=\"auth.isLoggedIn()\" [routerLink]=\"'/profile'\"\n          >Profile</a\n        >\n        <a mat-button *ngIf=\"auth.isLoggedIn()\" (click)=\"auth.logout()\"\n          >Logout</a\n        >\n      </div>\n    </div>\n  </mat-toolbar-row>\n</mat-toolbar>\n\n<router-outlet></router-outlet>\n","import { BrowserModule } from '@angular/platform-browser';\n\n// Routing\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\n// Angular Material\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { AngularMaterialModule } from './angular-material.module';\nimport { NgModule } from '@angular/core';\n\n// FormsModule\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n// Angular Flex Layout\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\n// Components\nimport { RegisterComponent } from './register/register.component';\nimport { ProfileComponent } from './profile/profile.component';\nimport { LoginComponent } from './login/login.component';\nimport { HomeComponent } from './home/home.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { BooklistComponent } from './booklist/booklist.component';\nimport { updateEntryDialog } from './booklist/booklist.component';\nimport { deleteEntryVerificationDialog } from './booklist/booklist.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    RegisterComponent,\n    ProfileComponent,\n    LoginComponent,\n    HomeComponent,\n    BooklistComponent,\n    updateEntryDialog,\n    deleteEntryVerificationDialog,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    AngularMaterialModule,\n    FlexLayoutModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface UserDetails {\n  _id: string;\n  email: string;\n  name: string;\n  exp: number;\n  iat: number;\n}\n\ninterface TokenResponse {\n  token: string;\n}\n\nexport interface TokenPayload {\n  email: string;\n  password: string;\n  name?: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthenticationService {\n  private token: string;\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  private saveToken(token: string): void {\n    localStorage.setItem('auth-token', token);\n    this.token = token;\n  }\n\n  public getToken(): string {\n    if (!this.token) {\n      this.token = localStorage.getItem('auth-token');\n    }\n    return this.token;\n  }\n\n  private request(\n    method: 'post' | 'get',\n    uri: 'auth/login' | 'auth/register' | 'users/me',\n    user?: TokenPayload\n  ): Observable<any> {\n    let base$;\n\n    if (method === 'post') {\n      base$ = this.http.post(`/api/${uri}`, user);\n    } else {\n      base$ = this.http.get(`/api/${uri}`, {\n        headers: { Authorization: `Bearer ${this.getToken()}` },\n      });\n    }\n\n    const request = base$.pipe(\n      map((data: TokenResponse) => {\n        if (data.token) {\n          this.saveToken(data.token);\n        }\n        return data;\n      })\n    );\n\n    return request;\n  }\n\n  public logout(): void {\n    this.token = '';\n    window.localStorage.removeItem('auth-token');\n    this.router.navigateByUrl('/');\n  }\n\n  public getUserDetails(): UserDetails {\n    const token = this.getToken();\n    let payload;\n    if (token) {\n      payload = token.split('.')[1];\n      payload = window.atob(payload);\n      return JSON.parse(payload);\n    } else {\n      return null;\n    }\n  }\n\n  public isLoggedIn(): boolean {\n    const user = this.getUserDetails();\n    if (user) {\n      return user.exp > Date.now() / 1000;\n    } else {\n      return false;\n    }\n  }\n\n  public register(user: TokenPayload): Observable<any> {\n    return this.request('post', 'auth/register', user);\n  }\n\n  public login(user: TokenPayload): Observable<any> {\n    return this.request('post', 'auth/login', user);\n  }\n\n  public profile(): Observable<any> {\n    return this.request('get', 'users/me');\n  }\n}\n","import { Component, Inject, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\n\nimport { AuthenticationService } from '../authentication.service';\nimport { BookListEntry } from './book';\nimport { BooksService } from '../books.service';\nimport { debounceTime } from 'rxjs/operators';\nimport {\n  MatDialog,\n  MatDialogRef,\n  MAT_DIALOG_DATA,\n} from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-booklist',\n  templateUrl: './booklist.component.html',\n  styleUrls: ['./booklist.component.scss'],\n})\nexport class BooklistComponent implements OnInit {\n  bookList: BookListEntry[];\n\n  @Input() filters: FormGroup;\n  @Input() addBookFormGroup: FormGroup;\n\n  stats = {\n    completed: 0,\n    dropped: 0,\n    onHold: 0,\n    reading: 0,\n    planToRead: 0,\n    pagesRead: 0,\n    averageRating: '0',\n  };\n\n  ratings = [\n    { value: 10, text: '10 - masterpiece' },\n    { value: 9, text: '9 - really good' },\n    { value: 8, text: '8 - great' },\n    { value: 7, text: '7 - good' },\n    { value: 6, text: '6 - okay' },\n    { value: 5, text: '5 - not great' },\n    { value: 4, text: '4 - bad' },\n    { value: 3, text: '3 - really bad' },\n    { value: 2, text: '2 - horrible' },\n    { value: 1, text: '1 - abysmal' },\n  ];\n\n  checkboxes = [\n    { formControlName: 'completed', text: 'Completed', color: 'lightgreen' },\n    { formControlName: 'dropped', text: 'Dropped', color: 'rgb(226, 82, 65)' },\n    { formControlName: 'onHold', text: 'On-hold', color: 'lightcoral' },\n    {\n      formControlName: 'reading',\n      text: 'Reading',\n      color: 'rgb(60, 150, 236)',\n    },\n    { formControlName: 'planToRead', text: 'Plan to read', color: 'lightgray' },\n  ];\n\n  newBookOptions: any[];\n  titleSelected: string[];\n  bookToAdd: any;\n\n  constructor(\n    private fb: FormBuilder,\n    private auth: AuthenticationService,\n    public book: BooksService,\n    public dialog: MatDialog\n  ) {\n    this.filters = fb.group({\n      completed: true,\n      dropped: false,\n      onHold: false,\n      reading: true,\n      planToRead: false,\n    });\n\n    this.addBookFormGroup = fb.group({\n      title: '',\n      status: 'Reading',\n      rating: '',\n      currentPage: 0,\n      review: '',\n      startDate: Date.now(),\n      endDate: Date.now(),\n    });\n  }\n\n  statusOrder: Map<string, number> = new Map();\n  ngOnInit(): void {\n    this.statusOrder.set('Completed', 1);\n    this.statusOrder.set('Dropped', 2);\n    this.statusOrder.set('On-hold', 3);\n    this.statusOrder.set('Reading', 4);\n    this.statusOrder.set('Plan to read', 5);\n\n    this.getBooklist();\n\n    this.onChanges();\n  }\n\n  getBooklist = () => {\n    this.auth.profile().subscribe((user) => {\n      this.setBookList(user);\n    });\n  };\n\n  setBookList = (user) => {\n    this.bookList = user.bookList;\n    this.updateStats();\n    this.bookList.sort((a, b) =>\n      this.statusOrder.get(a.status) < this.statusOrder.get(b.status) ? -1 : 1\n    );\n    this.bookList = this.bookList.filter((entry) =>\n      this.canDisplay(entry.status)\n    );\n  };\n\n  onChanges() {\n    this.addBookFormGroup\n      .get('title')\n      .valueChanges.pipe(debounceTime(250))\n      .subscribe((userInput) => {\n        this.book.searchBookByTitle(userInput).subscribe((books) => {\n          this.newBookOptions = books;\n        });\n      });\n\n    this.filters.valueChanges.subscribe(() => {\n      this.getBooklist();\n    });\n  }\n\n  removeHTMLTags = (str: string): string => {\n    return str.replace(/(<([^>]+)>)/gi, '');\n  };\n\n  canDisplay = (status): boolean => {\n    if (status == 'Completed') return this.filters.value.completed;\n    if (status == 'Dropped') return this.filters.value.dropped;\n    if (status == 'On-hold') return this.filters.value.onHold;\n    if (status == 'Reading') return this.filters.value.reading;\n    if (status == 'Plan to read') return this.filters.value.planToRead;\n    return false;\n  };\n\n  setBook(book) {\n    var title = book.volumeInfo.title;\n    if (!title) {\n      this.titleSelected = [];\n    } else {\n      this.titleSelected = [title];\n    }\n\n    this.bookToAdd = book;\n\n    this.addBookFormGroup.get('title').reset();\n  }\n\n  addBookToUserList() {\n    const booklistEntryToAdd: BookListEntry = {\n      volumeId: this.bookToAdd.id,\n      status: this.addBookFormGroup.get('status').value,\n      currentPageCount:\n        this.addBookFormGroup.get('status').value == 'Completed'\n          ? this.bookToAdd.volumeInfo.pageCount\n          : this.addBookFormGroup.get('currentPage').value,\n      rating: this.addBookFormGroup.get('rating').value,\n      review: this.addBookFormGroup.get('review').value,\n      startDate: this.addBookFormGroup.get('startDate').value,\n      endDate: this.addBookFormGroup.get('endDate').value,\n    };\n\n    this.book.addToUserBooklist(booklistEntryToAdd).subscribe((res) => {\n      this.getBooklist();\n    });\n\n    this.titleSelected = [];\n    this.addBookFormGroup.reset();\n  }\n\n  removeBookFromUserList(volumeId) {\n    this.book.removeFromUserBooklist(volumeId).subscribe((res) => {\n      this.getBooklist();\n    });\n  }\n\n  updateBooklistEntry(entry: BookListEntry) {\n    this.book.updateBooklistEntry(entry).subscribe((res) => {\n      this.getBooklist();\n    });\n  }\n\n  deleteEntryVerification(volumeId): void {\n    const dialogRef = this.dialog.open(deleteEntryVerificationDialog, {\n      width: '20vw',\n      height: '20vh',\n    });\n\n    dialogRef.afterClosed().subscribe((shouldDelete) => {\n      if (shouldDelete) this.removeBookFromUserList(volumeId);\n    });\n  }\n\n  toggleUpdateEntryDialog(entry: BookListEntry): void {\n    const dialogRef = this.dialog.open(updateEntryDialog, {\n      width: '20vw',\n      height: '50vh',\n      data: entry,\n    });\n\n    dialogRef.afterClosed().subscribe((updatedEntry) => {\n      if (!updatedEntry) return;\n      this.updateBooklistEntry(updatedEntry);\n    });\n  }\n\n  updateStats() {\n    this.stats = {\n      completed: this.bookList.filter((entry) => entry.status == 'Completed')\n        .length,\n      dropped: this.bookList.filter((entry) => entry.status == 'Dropped')\n        .length,\n      onHold: this.bookList.filter((entry) => entry.status == 'On-hold').length,\n      reading: this.bookList.filter((entry) => entry.status == 'Reading')\n        .length,\n      planToRead: this.bookList.filter(\n        (entry) => entry.status == 'Plan to read'\n      ).length,\n      pagesRead: this.getPagesRead(),\n      averageRating: this.getAverageRating(),\n    };\n  }\n\n  getPagesRead(): number {\n    var total = 0;\n    this.bookList.forEach((entry) => (total += entry.currentPageCount));\n    return total;\n  }\n\n  getAverageRating(): string {\n    if (this.bookList.length == 0) return '';\n\n    var totalRating = 0;\n    var numberOfRatings = 0;\n\n    this.bookList.forEach((entry) => {\n      if (entry.rating) {\n        totalRating += entry.rating;\n        numberOfRatings++;\n      }\n    });\n\n    return (Math.round((totalRating / numberOfRatings) * 100) / 100).toFixed(2);\n  }\n}\n\n@Component({\n  selector: 'booklist-entry-update-dialog',\n  templateUrl: './booklist-entry-update-dialog.html',\n})\nexport class updateEntryDialog {\n  @Input() updatedEntryFormGroup: FormGroup;\n  ratings = [\n    { value: 10, text: '10 - masterpiece' },\n    { value: 9, text: '9 - really good' },\n    { value: 8, text: '8 - great' },\n    { value: 7, text: '7 - good' },\n    { value: 6, text: '6 - okay' },\n    { value: 5, text: '5 - not great' },\n    { value: 4, text: '4 - bad' },\n    { value: 3, text: '3 - really bad' },\n    { value: 2, text: '2 - horrible' },\n    { value: 1, text: '1 - abysmal' },\n  ];\n\n  constructor(\n    public dialogRef: MatDialogRef<updateEntryDialog>,\n    @Inject(MAT_DIALOG_DATA) public updatedEntry: BookListEntry,\n    public fb: FormBuilder\n  ) {\n    this.updatedEntryFormGroup = fb.group({\n      status: updatedEntry.status,\n      rating: updatedEntry.rating,\n      currentPage: updatedEntry.currentPageCount,\n      review: updatedEntry.review,\n      startDate: updatedEntry.startDate,\n      endDate: updatedEntry.endDate,\n    });\n  }\n\n  updateEntry(): void {\n    const vId = this.updatedEntry.volumeId;\n    const book = this.updatedEntry.book;\n    this.updatedEntry = {\n      volumeId: vId,\n      status: this.updatedEntryFormGroup.get('status').value,\n      rating: this.updatedEntryFormGroup.get('rating').value,\n      currentPageCount: this.updatedEntryFormGroup.get('currentPage').value,\n      review: this.updatedEntryFormGroup.get('review').value,\n      startDate: this.updatedEntryFormGroup.get('startDate').value,\n      endDate: this.updatedEntryFormGroup.get('endDate').value,\n      book: book,\n    };\n    this.dialogRef.close(this.updatedEntry);\n  }\n\n  cancel(): void {\n    this.dialogRef.close(false);\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close(false);\n  }\n}\n\n@Component({\n  selector: 'book-list-entry-delete-dialog',\n  templateUrl: './booklist-entry-delete-dialog.html',\n})\nexport class deleteEntryVerificationDialog {\n  constructor(public dialogRef: MatDialogRef<deleteEntryVerificationDialog>) {}\n\n  deleteEntry(): void {\n    this.dialogRef.close(true);\n  }\n\n  cancel(): void {\n    this.dialogRef.close(false);\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close(false);\n  }\n}\n","<mat-grid-list cols=\"5\" rowHeight=\"25vh\">\n  <mat-grid-tile colspan=\"1\" rowspan=\"2\">\n    <mat-card class=\"container\">\n      <mat-card-title>Filters</mat-card-title>\n      <section [formGroup]=\"filters\">\n        <div *ngFor=\"let box of checkboxes\">\n          <p>\n            <mat-checkbox\n              color=\"primary\"\n              [formControlName]=\"box.formControlName\"\n              >{{ box.text }}</mat-checkbox\n            >\n          </p>\n          <div\n            class=\"filter-legend\"\n            [ngStyle]=\"{ 'background-color': box.color }\"\n            *ngIf=\"filters.get(box.formControlName).value\"\n          ></div>\n        </div>\n      </section>\n    </mat-card>\n  </mat-grid-tile>\n  <mat-grid-tile\n    colspan=\"3\"\n    rowspan=\"{{ bookList.length < 6 ? 6 : bookList.length + 1 }}\"\n  >\n    <div class=\"book-list-container\">\n      <mat-card *ngFor=\"let entry of bookList\" class=\"book-list-entry\">\n        <img\n          src=\"{{ entry.book.coverImage }}\"\n          alt=\"\"\n          class=\"book-list-entry-image\"\n        />\n\n        <div class=\"book-list-entry-text\">\n          <mat-card-title class=\"book-list-entry-title\">{{\n            entry.book.title\n          }}</mat-card-title>\n          <mat-card-content>\n            <h3>by {{ entry.book.author }}</h3>\n            <div class=\"line-clamp\">\n              <p>{{ removeHTMLTags(entry.book.blurb) }}</p>\n            </div>\n          </mat-card-content>\n        </div>\n        <div [ngClass]=\"[entry.status, 'book-list-entry-status-bar']\"></div>\n        <div class=\"book-list-entry-info\">\n          <mat-card\n            [ngClass]=\"['rating-' + entry.rating, 'book-list-entry-rating']\"\n            *ngIf=\"entry.rating\"\n          >\n            {{ entry.rating }} / 10\n          </mat-card>\n          <mat-card\n            [ngClass]=\"['rating-' + entry.rating, 'book-list-entry-rating']\"\n            *ngIf=\"!entry.rating\"\n          >\n            - / 10\n          </mat-card>\n          <mat-card [ngClass]=\"['book-list-entry-category']\">{{\n            entry.book.categories[0]\n              ? entry.book.categories[0]\n              : 'No genre information'\n          }}</mat-card>\n        </div>\n        <button\n          class=\"book-list-entry-update-button\"\n          mat-icon-button\n          (click)=\"toggleUpdateEntryDialog(entry)\"\n        >\n          <mat-icon>edit</mat-icon>\n        </button>\n        <button\n          class=\"book-list-entry-delete-button\"\n          mat-icon-button\n          (click)=\"deleteEntryVerification(entry.volumeId)\"\n        >\n          <mat-icon>delete</mat-icon>\n        </button>\n      </mat-card>\n      <mat-card class=\"no-books\" *ngIf=\"bookList.length == 0\"\n        >Nothing to display</mat-card\n      >\n    </div>\n  </mat-grid-tile>\n  <mat-grid-tile colspan=\"1\" rowspan=\"3\">\n    <div class=\"add-a-book-container\">\n      <mat-card class=\"container\">\n        <mat-card-title class=\"add-a-book-header\">Add a book</mat-card-title>\n        <form [formGroup]=\"addBookFormGroup\" (ngSubmit)=\"addBookToUserList()\">\n          <mat-form-field>\n            <mat-chip-list #chipList>\n              <mat-chip\n                *ngFor=\"let title of titleSelected\"\n                [removable]=\"true\"\n                (removed)=\"titleSelected = []\"\n              >\n                <span>{{ title }}</span>\n                <mat-icon matChipRemove>cancel</mat-icon>\n              </mat-chip>\n              <input\n                #autocompleteInput\n                type=\"text\"\n                placeholder=\"Enter title\"\n                matInput\n                formControlName=\"title\"\n                [matAutocomplete]=\"auto\"\n                [matChipInputFor]=\"chipList\"\n              />\n              <mat-autocomplete #auto=\"matAutocomplete\">\n                <mat-option\n                  *ngFor=\"let option of newBookOptions\"\n                  [value]=\"option.volumeInfo.title\"\n                  (onSelectionChange)=\"setBook(option)\"\n                >\n                  {{ option.volumeInfo.title }} by\n                  {{ option.volumeInfo.authors }}\n                </mat-option>\n              </mat-autocomplete>\n            </mat-chip-list>\n          </mat-form-field>\n          <mat-card-content>\n            <mat-form-field>\n              <mat-label>Status</mat-label>\n              <mat-select name=\"addBookStatus\" formControlName=\"status\">\n                <mat-option value=\"Completed\">Completed</mat-option>\n                <mat-option value=\"Dropped\">Dropped</mat-option>\n                <mat-option value=\"On-hold\">On-hold</mat-option>\n                <mat-option value=\"Reading\">Reading</mat-option>\n                <mat-option value=\"Plan to read\">Plan to read</mat-option>\n              </mat-select>\n            </mat-form-field>\n            <mat-form-field\n              *ngIf=\"\n                addBookFormGroup.get('status').value == 'Completed' ||\n                addBookFormGroup.get('status').value == 'Dropped'\n              \"\n            >\n              <mat-label>Rating</mat-label>\n              <mat-select name=\"addBookRating\" formControlName=\"rating\">\n                <mat-option\n                  *ngFor=\"let option of ratings\"\n                  [value]=\"option.value\"\n                  >{{ option.text }}</mat-option\n                >\n              </mat-select>\n            </mat-form-field>\n            <mat-form-field\n              *ngIf=\"addBookFormGroup.get('status').value == 'Completed'\"\n            >\n              <mat-label>Review</mat-label>\n              <textarea\n                matInput\n                formControlName=\"review\"\n                name=\"addBookReview\"\n              ></textarea>\n            </mat-form-field>\n            <mat-form-field\n              *ngIf=\"\n                addBookFormGroup.get('status').value == 'Reading' ||\n                addBookFormGroup.get('status').value == 'On-hold'\n              \"\n            >\n              <input\n                matInput\n                name=\"currentPage\"\n                placeholder=\"Current Page\"\n                formControlName=\"currentPage\"\n              />\n            </mat-form-field>\n            <mat-form-field\n              style=\"width: 85%\"\n              appearance=\"fill\"\n              *ngIf=\"\n                !(\n                  addBookFormGroup.get('status').value == 'Plan to read' ||\n                  addBookFormGroup.get('status').value == null\n                )\n              \"\n            >\n              <mat-label>Start date</mat-label>\n              <input\n                matInput\n                [matDatepicker]=\"picker\"\n                formControlName=\"startDate\"\n              />\n              <mat-datepicker-toggle\n                matSuffix\n                [for]=\"picker\"\n              ></mat-datepicker-toggle>\n              <mat-datepicker #picker></mat-datepicker>\n            </mat-form-field>\n            <mat-form-field\n              style=\"width: 85%\"\n              appearance=\"fill\"\n              *ngIf=\"\n                !(\n                  addBookFormGroup.get('status').value == 'Plan to read' ||\n                  addBookFormGroup.get('status').value == 'Reading' ||\n                  addBookFormGroup.get('status').value == null\n                )\n              \"\n            >\n              <mat-label>End date</mat-label>\n              <input\n                matInput\n                [matDatepicker]=\"picker\"\n                formControlName=\"endDate\"\n              />\n              <mat-datepicker-toggle\n                matSuffix\n                [for]=\"picker\"\n              ></mat-datepicker-toggle>\n              <mat-datepicker #picker></mat-datepicker>\n            </mat-form-field>\n          </mat-card-content>\n          <button\n            mat-raised-button\n            class=\"btn-block\"\n            style=\"position: absolute; bottom: 10%; width: 90%\"\n            (click)=\"addBookFormGroup.reset()\"\n          >\n            Clear\n          </button>\n          <button\n            mat-raised-button\n            color=\"primary\"\n            class=\"btn-block\"\n            type=\"submit\"\n            style=\"position: absolute; bottom: 2%; width: 90%\"\n          >\n            Add entry!\n          </button>\n        </form>\n      </mat-card>\n    </div>\n  </mat-grid-tile>\n  <mat-grid-tile colspan=\"1\" rowspan=\"2\">\n    <mat-card class=\"container\">\n      <mat-card-title>Stats</mat-card-title>\n      <mat-card-content>\n        <h3>Completed: {{ stats.completed }}</h3>\n        <h3>Dropped: {{ stats.dropped }}</h3>\n        <h3>On-hold: {{ stats.onHold }}</h3>\n        <h3>Reading: {{ stats.reading }}</h3>\n        <h3>Plan-to-read: {{ stats.planToRead }}</h3>\n        <h3>Pages read: {{ stats.pagesRead }}</h3>\n        <h3>Average rating: {{ stats.averageRating }}</h3>\n      </mat-card-content>\n    </mat-card>\n  </mat-grid-tile>\n</mat-grid-list>\n","<h1 mat-dialog-title style=\"text-align: center\">\n  Update <span style=\"font-style: italic\">{{ updatedEntry.book.title }}</span>\n</h1>\n<div class=\"add-a-book-container\">\n  <form [formGroup]=\"updatedEntryFormGroup\">\n    <mat-form-field>\n      <mat-label>Status</mat-label>\n      <mat-select name=\"addBookStatus\" formControlName=\"status\">\n        <mat-option value=\"Completed\">Completed</mat-option>\n        <mat-option value=\"Dropped\">Dropped</mat-option>\n        <mat-option value=\"On-hold\">On-hold</mat-option>\n        <mat-option value=\"Reading\">Reading</mat-option>\n        <mat-option value=\"Plan to read\">Plan to read</mat-option>\n      </mat-select>\n    </mat-form-field>\n    <mat-form-field\n      *ngIf=\"\n                updatedEntryFormGroup.get('status').value == 'Completed' ||\n                updatedEntryFormGroup.get('status').value == 'Dropped'\n              \"\n    >\n      <mat-label>Rating</mat-label>\n      <mat-select name=\"addBookRating\" formControlName=\"rating\">\n        <mat-option *ngFor=\"let option of ratings\" [value]=\"option.value\"\n          >{{ option.text }}</mat-option\n        >\n      </mat-select>\n    </mat-form-field>\n    <mat-form-field\n      *ngIf=\"updatedEntryFormGroup.get('status').value == 'Completed'\"\n    >\n      <mat-label>Review</mat-label>\n      <textarea\n        matInput\n        formControlName=\"review\"\n        name=\"addBookReview\"\n      ></textarea>\n    </mat-form-field>\n    <mat-form-field\n      *ngIf=\"\n                updatedEntryFormGroup.get('status').value == 'Reading' ||\n                updatedEntryFormGroup.get('status').value == 'On-hold'\n              \"\n    >\n      <input\n        matInput\n        name=\"currentPage\"\n        placeholder=\"Current Page\"\n        formControlName=\"currentPage\"\n      />\n    </mat-form-field>\n  </form>\n</div>\n<div>\n  <button\n    mat-raised-button\n    style=\"margin-right: 1vw; margin-left: 2.8vw\"\n    (click)=\"cancel()\"\n  >\n    Cancel\n  </button>\n  <button\n    mat-raised-button\n    color=\"primary\"\n    (click)=\"updateEntry()\"\n    cdkFocusInitial\n  >\n    Update\n  </button>\n</div>\n","<h1 mat-dialog-title style=\"text-align: center\">\n  Are you sure you want to delete this entry?\n</h1>\n<div style=\"margin-top: 10%\">\n  <button\n    mat-raised-button\n    style=\"margin-right: 1vw; margin-left: 2.8vw\"\n    (click)=\"cancel()\"\n  >\n    Cancel\n  </button>\n  <button\n    mat-stroked-button\n    color=\"warn\"\n    (click)=\"deleteEntry()\"\n    cdkFocusInitial\n  >\n    Delete\n  </button>\n</div>\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { Book, BookListEntry } from './booklist/book';\nimport { AuthenticationService } from './authentication.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BooksService {\n  public booksData;\n\n  constructor(private http: HttpClient, private auth: AuthenticationService) {}\n\n  public searchBookByTitle(title: string): Observable<any> {\n    return this.http.get<any>('/api/books', {\n      params: {\n        title: title,\n      },\n    });\n  }\n\n  public addToUserBooklist(booklistEntry: BookListEntry) {\n    return this.http.post<any>(\n      '/api/users/add-to-booklist',\n      {\n        status: booklistEntry.status,\n        notes: booklistEntry.notes,\n        currentPageCount: booklistEntry.currentPageCount,\n        rating: booklistEntry.rating,\n        review: booklistEntry.review,\n        startDate: booklistEntry.startDate,\n        endDate: booklistEntry.endDate,\n      },\n      {\n        params: {\n          volumeId: booklistEntry.volumeId,\n        },\n        headers: { Authorization: `Bearer ${this.auth.getToken()}` },\n      }\n    );\n  }\n\n  public updateBooklistEntry(booklistEntry: BookListEntry) {\n    return this.http.put('/api/users/update-booklist-entry', booklistEntry, {\n      params: {\n        volumeId: booklistEntry.volumeId,\n      },\n      headers: { Authorization: `Bearer ${this.auth.getToken()}` },\n    });\n  }\n\n  public removeFromUserBooklist(volumeId: string) {\n    return this.http.delete('api/users/remove-from-booklist', {\n      params: {\n        volumeId: volumeId,\n      },\n      headers: { Authorization: `Bearer ${this.auth.getToken()}` },\n    });\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthenticationService, UserDetails } from '../authentication.service';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css'],\n})\nexport class HomeComponent implements OnInit {\n  user: UserDetails;\n\n  constructor(private auth: AuthenticationService) {}\n\n  ngOnInit(): void {\n    this.getUserDetails();\n  }\n\n  getUserDetails = () => {\n    this.auth.profile().subscribe(\n      (user) => {\n        this.user = user;\n      },\n      (err) => {\n        console.log(err);\n      }\n    );\n  };\n}\n","<mat-grid-list cols=\"3\" rowHeight=\"45%\">\n  <mat-grid-tile colspan=\"2\" rowspan=\"2\">\n    <div *ngIf=\"user\" style=\"position: absolute; left: 2%; top: 5%\">\n      <h1 style=\"padding-top: 1vh\">Welcome back, {{ user.name }}!</h1>\n      <h3 style=\"padding-top: 1vh\">\n        Are you still reading\n        <span style=\"font-style: italic\">The Power of Habit?</span>\n      </h3>\n      <button mat-raised-button color=\"primary\" style=\"padding-top: 1vh\">\n        You can update its entry here\n      </button>\n    </div>\n  </mat-grid-tile>\n  <mat-grid-tile colspan=\"1\" rowspan=\"1\">\n    <mat-card style=\"height: 90%; width: 80%\">\n      <h2>Stats</h2>\n      <mat-card-content>\n        <p>Completed: 12 books / 4200 pages</p>\n        <p>Favorite Genre: <span style=\"font-style: bold\">Psychology</span></p>\n      </mat-card-content>\n    </mat-card>\n  </mat-grid-tile>\n  <mat-grid-tile colspan=\"1\" rowspan=\"1\">\n    <mat-card style=\"height: 90%; width: 80%\">\n      <h2>Friend Activity</h2>\n      <mat-card-content>\n        <p>\n          John Doe is currently reading:\n          <span style=\"font-style: italic\"\n            >How to Win Friends and Influence People</span\n          >\n          ...\n        </p>\n        <p>\n          Bryan Horne is currently reading:\n          <span style=\"font-style: italic\">The Slight Edge</span>\n          by Jeff Olsen\n        </p>\n        <p>\n          Sally Johnson just finished:\n          <span style=\"font-style: italic\">The Art of War</span>\n          by Sun Tzu\n        </p>\n      </mat-card-content>\n    </mat-card>\n  </mat-grid-tile>\n</mat-grid-list>\n","import { Component } from '@angular/core';\nimport { AuthenticationService, TokenPayload } from '../authentication.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css'],\n})\nexport class LoginComponent {\n  credentials: TokenPayload = {\n    email: '',\n    password: '',\n  };\n\n  constructor(private auth: AuthenticationService, private router: Router) {}\n\n  login() {\n    this.auth.login(this.credentials).subscribe(\n      () => {\n        this.router.navigateByUrl('/profile');\n      },\n      (err) => {\n        console.error(err);\n      }\n    );\n  }\n}\n","<div class=\"form-wrapper\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n  <mat-card class=\"box\">\n    <mat-card-header>\n      <mat-card-title>Log in</mat-card-title>\n    </mat-card-header>\n\n    <form class=\"auth-form\" (submit)=\"login()\">\n      <mat-card-content>\n        <mat-form-field class=\"full-width\">\n          <input\n            matInput\n            type=\"email\"\n            class=\"\"\n            name=\"email\"\n            placeholder=\"Enter email\"\n            [(ngModel)]=\"credentials.email\"\n            placeholder=\"Email\"\n          />\n        </mat-form-field>\n\n        <mat-form-field class=\"full-width\">\n          <input\n            matInput\n            type=\"password\"\n            class=\"\"\n            name=\"password\"\n            placeholder=\"Password\"\n            [(ngModel)]=\"credentials.password\"\n            placeholder=\"Password\"\n          />\n        </mat-form-field>\n      </mat-card-content>\n      <button mat-stroked-button color=\"accent\" class=\"btn-block\" type=\"submit\">\n        Log in\n      </button>\n    </form>\n  </mat-card>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { AuthenticationService, UserDetails } from '../authentication.service';\n\n@Component({\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css'],\n})\nexport class ProfileComponent implements OnInit {\n  details: UserDetails;\n\n  constructor(private auth: AuthenticationService) {}\n\n  ngOnInit() {\n    this.auth.profile().subscribe(\n      (user) => {\n        this.details = user;\n      },\n      (err) => {\n        console.error(err);\n      }\n    );\n  }\n}\n","<div class=\"form-wrapper\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n  <mat-card class=\"box\">\n    <mat-card-header>\n      <mat-card-title>Your Profile</mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n      <br />\n      <mat-action-row>\n        <h3>Full name</h3>\n        <p>{{ details?.name }}</p>\n      </mat-action-row>\n      <br />\n      <mat-action-row>\n        <h3>Email</h3>\n        <p>{{ details?.email }}</p>\n      </mat-action-row>\n    </mat-card-content>\n  </mat-card>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { AuthenticationService, TokenPayload } from '../authentication.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css'],\n})\nexport class RegisterComponent implements OnInit {\n  credentials: TokenPayload = {\n    email: '',\n    name: '',\n    password: '',\n  };\n\n  constructor(private auth: AuthenticationService, private router: Router) {}\n\n  ngOnInit() {}\n\n  register() {\n    this.auth.register(this.credentials).subscribe(\n      () => {\n        this.router.navigateByUrl('/profile');\n      },\n      (err) => {\n        console.error(err);\n      }\n    );\n  }\n}\n","<div class=\"form-wrapper\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n  <mat-card class=\"box\">\n    <mat-card-header>\n      <mat-card-title>Register</mat-card-title>\n    </mat-card-header>\n\n    <form class=\"auth-form\" (submit)=\"register()\">\n      <mat-card-content>\n        <mat-form-field class=\"full-width\">\n          <input\n            matInput\n            type=\"text\"\n            class=\"\"\n            name=\"name\"\n            placeholder=\"Enter your name\"\n            [(ngModel)]=\"credentials.name\"\n            placeholder=\"Full name\"\n          />\n        </mat-form-field>\n\n        <mat-form-field class=\"full-width\">\n          <input\n            matInput\n            type=\"email\"\n            class=\"\"\n            name=\"email\"\n            placeholder=\"Enter email\"\n            [(ngModel)]=\"credentials.email\"\n            placeholder=\"Email\"\n          />\n        </mat-form-field>\n\n        <mat-form-field class=\"full-width\">\n          <input\n            matInput\n            type=\"password\"\n            class=\"\"\n            name=\"password\"\n            placeholder=\"Password\"\n            [(ngModel)]=\"credentials.password\"\n            placeholder=\"Password\"\n          />\n        </mat-form-field>\n      </mat-card-content>\n\n      <button mat-stroked-button color=\"accent\" class=\"btn-block\">\n        Register\n      </button>\n    </form>\n  </mat-card>\n</div>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.error(err));\n"]}
{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/angular-material.module.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/authentication.service.ts","webpack:///src/app/booklist/book.ts","webpack:///src/app/booklist/booklist.component.ts","webpack:///src/app/booklist/booklist.component.html","webpack:///src/app/booklist/booklist-entry-update-dialog.html","webpack:///src/app/booklist/booklist-entry-delete-dialog.html","webpack:///src/app/books.service.ts","webpack:///src/app/friends/friends.component.ts","webpack:///src/app/friends/friends.component.html","webpack:///src/app/home/home.component.ts","webpack:///src/app/home/home.component.html","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/profile/profile.component.ts","webpack:///src/app/profile/profile.component.html","webpack:///src/app/register/register.component.ts","webpack:///src/app/register/register.component.html","webpack:///src/app/stats.service.ts","webpack:///src/app/timeline/timeline.component.ts","webpack:///src/app/timeline/timeline.component.html","webpack:///src/app/users.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","materialModules","AngularMaterialModule","imports","routes","path","component","AppRoutingModule","forRoot","auth","AppComponent","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","AuthenticationService","http","router","token","localStorage","setItem","getItem","method","uri","user","base$","post","get","headers","Authorization","getToken","request","pipe","data","saveToken","window","removeItem","navigateByUrl","payload","split","atob","JSON","parse","getUserDetails","exp","Date","now","providedIn","StatusMapToCamelCase","Map","Ratings","value","text","statusOrder","BooklistComponent","fb","book","dialog","stat","ratings","checkboxes","formControlName","color","getBooklist","profile","subscribe","setBookList","bookList","updateStats","sortBookList","filterBookList","sort","a","b","status","visibleBookList","filter","entry","filters","removeHTMLTags","str","i","length","includes","charAt","substring","replace","group","completed","dropped","onHold","reading","planToRead","addBookFormGroup","title","rating","currentPageCount","review","startDate","endDate","onChanges","updateNewBookOptionsDropDown","valueChanges","userInput","searchBookByTitle","books","newBookOptions","titleSelected","volumeInfo","bookToAdd","reset","dataFromAddBookFormGroup","getRawValue","pageCount","booklistEntryToAdd","volumeId","addToUserBooklist","res","removeFromUserBooklist","updateBooklistEntry","dialogRef","open","deleteEntryVerificationDialog","width","height","afterClosed","shouldDelete","removeBookFromUserList","updateEntryDialog","updatedEntry","stats","getStats","init","addBookToUserList","updatedEntryFormGroup","currentPage","vId","close","cancel","updateEntry","deleteEntry","BooksService","params","booklistEntry","notes","put","delete","FriendsComponent","users","_snackBar","friendsList","updatingFriendCode","updateFriendsList","friendCode","generateFriendsList","friends","friendIds","forEach","getUser","push","updateFriendCode","newFriendCode","err","openErrorSnackBar","addFriend","addFriendCode","message","HomeComponent","statsService","LoginComponent","credentials","email","password","login","console","error","ProfileComponent","details","RegisterComponent","name","register","StatsService","pagesRead","getPagesRead","averageRating","getAverageRating","total","totalRating","numberOfRatings","Math","round","toFixed","TimelineComponent","UsersService","toString","environment","production","catch"],"mappings":";;;;;;;;;;;;;;;;;AAAA,aAASA,wBAAT,CAAkCC,GAAlC,EAAuC;AACtC;AACA;AACA,aAAOC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAW;AACxC,YAAIC,CAAC,GAAG,IAAIC,KAAJ,CAAU,yBAAyBL,GAAzB,GAA+B,GAAzC,CAAR;AACAI,SAAC,CAACE,IAAF,GAAS,kBAAT;AACA,cAAMF,CAAN;AACA,OAJM,CAAP;AAKA;;AACDL,4BAAwB,CAACQ,IAAzB,GAAgC,YAAW;AAAE,aAAO,EAAP;AAAY,KAAzD;;AACAR,4BAAwB,CAACG,OAAzB,GAAmCH,wBAAnC;AACAS,UAAM,CAACC,OAAP,GAAiBV,wBAAjB;AACAA,4BAAwB,CAACW,EAAzB,GAA8B,yCAA9B;;;;;;;;;;;;;;;;ACZA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAoCA,QAAMC,eAAe,GAAG,CACtB,+DADsB,EAEtB,oFAFsB,EAGtB,wEAHsB,EAItB,oEAJsB,EAKtB,4EALsB,EAMtB,uEANsB,EAOtB,2EAPsB,EAQtB,+EARsB,EAStB,qEATsB,EAUtB,uEAVsB,EAWtB,qEAXsB,EAYtB,qEAZsB,EAatB,4FAbsB,EActB,+EAdsB,EAetB,uEAfsB,EAgBtB,yEAhBsB,EAiBtB,2EAjBsB,EAkBtB,8EAlBsB,EAmBtB,qEAnBsB,EAoBtB,uEApBsB,EAqBtB,qEArBsB,EAsBtB,2EAtBsB,EAuBtB,gFAvBsB,EAwBtB,qFAxBsB,EAyBtB,qEAzBsB,EA0BtB,kEA1BsB,EA2BtB,gEA3BsB,EA4BtB,uEA5BsB,EA6BtB,8EA7BsB,EA8BtB,uEA9BsB,EA+BtB,iFA/BsB,EAgCtB,2EAhCsB,EAiCtB,2EAjCsB,EAkCtB,yEAlCsB,CAAxB;;QAyCaC,qB;;;;;YAAAA;;;;yBAAAA,qB;AAAqB,O;AAAA,iBAHtB,4DAGsB,SAHLD,eAGK,GAxChC,+DAwCgC,EAvChC,oFAuCgC,EAtChC,wEAsCgC,EArChC,oEAqCgC,EApChC,4EAoCgC,EAnChC,uEAmCgC,EAlChC,2EAkCgC,EAjChC,+EAiCgC,EAhChC,qEAgCgC,EA/BhC,uEA+BgC,EA9BhC,qEA8BgC,EA7BhC,qEA6BgC,EA5BhC,4FA4BgC,EA3BhC,+EA2BgC,EA1BhC,uEA0BgC,EAzBhC,yEAyBgC,EAxBhC,2EAwBgC,EAvBhC,8EAuBgC,EAtBhC,qEAsBgC,EArBhC,uEAqBgC,EApBhC,qEAoBgC,EAnBhC,2EAmBgC,EAlBhC,gFAkBgC,EAjBhC,qFAiBgC,EAhBhC,qEAgBgC,EAfhC,kEAegC,EAdhC,gEAcgC,EAbhC,uEAagC,EAZhC,8EAYgC,EAXhC,uEAWgC,EAVhC,iFAUgC,EAThC,2EASgC,EARhC,2EAQgC,EAPhC,yEAOgC;;;;0HAArBC,qB,EAAqB;AAAA,kBAHtB,4DAGsB,EAxChC,+DAwCgC,EAvChC,oFAuCgC,EAtChC,wEAsCgC,EArChC,oEAqCgC,EApChC,4EAoCgC,EAnChC,uEAmCgC,EAlChC,2EAkCgC,EAjChC,+EAiCgC,EAhChC,qEAgCgC,EA/BhC,uEA+BgC,EA9BhC,qEA8BgC,EA7BhC,qEA6BgC,EA5BhC,4FA4BgC,EA3BhC,+EA2BgC,EA1BhC,uEA0BgC,EAzBhC,yEAyBgC,EAxBhC,2EAwBgC,EAvBhC,8EAuBgC,EAtBhC,qEAsBgC,EArBhC,uEAqBgC,EApBhC,qEAoBgC,EAnBhC,2EAmBgC,EAlBhC,gFAkBgC,EAjBhC,qFAiBgC,EAhBhC,qEAgBgC,EAfhC,kEAegC,EAdhC,gEAcgC,EAbhC,uEAagC,EAZhC,8EAYgC,EAXhC,uEAWgC,EAVhC,iFAUgC,EAThC,2EASgC,EARhC,2EAQgC,EAPhC,yEAOgC;AAPjB,kBAjCf,+DAiCe,EAhCf,oFAgCe,EA/Bf,wEA+Be,EA9Bf,oEA8Be,EA7Bf,4EA6Be,EA5Bf,uEA4Be,EA3Bf,2EA2Be,EA1Bf,+EA0Be,EAzBf,qEAyBe,EAxBf,uEAwBe,EAvBf,qEAuBe,EAtBf,qEAsBe,EArBf,4FAqBe,EApBf,+EAoBe,EAnBf,uEAmBe,EAlBf,yEAkBe,EAjBf,2EAiBe,EAhBf,8EAgBe,EAff,qEAee,EAdf,uEAce,EAbf,qEAae,EAZf,2EAYe,EAXf,gFAWe,EAVf,qFAUe,EATf,qEASe,EARf,kEAQe,EAPf,gEAOe,EANf,uEAMe,EALf,8EAKe,EAJf,uEAIe,EAHf,iFAGe,EAFf,2EAEe,EADf,2EACe,EAAf,yEAAe;AAOiB,O;AAPjB,K;;;;;sEAOJA,qB,EAAqB;cAJjC,sDAIiC;eAJxB;AACRC,iBAAO,GAAG,4DAAH,SAAoBF,eAApB,CADC;AAERF,iBAAO,YAAME,eAAN;AAFC,S;AAIwB,Q;;;;;;;;;;;;;;;;;;AC7ElC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAUA,QAAMG,MAAM,GAAW,CACrB;AAAEC,UAAI,EAAE,EAAR;AAAYC,eAAS,EAAE;AAAvB,KADqB,EAErB;AAAED,UAAI,EAAE,OAAR;AAAiBC,eAAS,EAAE;AAA5B,KAFqB,EAGrB;AAAED,UAAI,EAAE,UAAR;AAAoBC,eAAS,EAAE;AAA/B,KAHqB,EAIrB;AAAED,UAAI,EAAE,SAAR;AAAmBC,eAAS,EAAE;AAA9B,KAJqB,EAKrB;AAAED,UAAI,EAAE,UAAR;AAAoBC,eAAS,EAAE;AAA/B,KALqB,EAMrB;AAAED,UAAI,EAAE,SAAR;AAAmBC,eAAS,EAAE;AAA9B,KANqB,EAOrB;AAAED,UAAI,EAAE,UAAR;AAAoBC,eAAS,EAAE;AAA/B,KAPqB,CAAvB;;QAcaC,gB;;;;;YAAAA;;;;yBAAAA,gB;AAAgB,O;AAAA,gBAHlB,CAAC,6DAAaC,OAAb,CAAqBJ,MAArB,CAAD,CAGkB,EAFjB,4DAEiB;;;;0HAAhBG,gB,EAAgB;AAAA;AAAA,kBAFjB,4DAEiB;AAAA,O;AAFL,K;;;;;sEAEXA,gB,EAAgB;cAJ5B,sDAI4B;eAJnB;AACRJ,iBAAO,EAAE,CAAC,6DAAaK,OAAb,CAAqBJ,MAArB,CAAD,CADD;AAERL,iBAAO,EAAE,CAAC,4DAAD;AAFD,S;AAImB,Q;;;;;;;;;;;;;;;;;;ACxB7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACKQ;;AACG;;AAAM;;;;AADgC;;;;;;AAGzC;;AACG;;AAAO;;;;AAD+B;;;;;;AAIzC;;AACG;;AAAO;;;;AAD8B;;;;;;AAGxC;;AACG;;AAAQ;;;;AAD6B;;;;;;AAGxC;;AACG;;AAAO;;;;AAD8B;;;;;;AAKxC;;AACG;;AAAO;;;;AAD8B;;;;;;;;AAGxC;;AAAwC;AAAA;;AAAA;;AAAA,iBAAS,QAAAU,IAAA,SAAT;AAAsB,SAAtB;;AACrC;;AAAM;;;;QDnBJC,Y,GACX,sBAAmBD,IAAnB,EAAgD;AAAA;;AAA7B,WAAAA,IAAA,GAAAA,IAAA;AAA+B,K;;;uBADvCC,Y,EAAY,8I;AAAA,K;;;YAAZA,Y;AAAY,+B;AAAA,e;AAAA,a;AAAA,sX;AAAA;AAAA;ACRzB;;AACE;;AACE;;AAAwD;;AAAS;;AACjE;;AACE;;AACE;;AAGA;;AAIA;;AAGA;;AAGA;;AAGF;;AACA;;AACE;;AAGA;;AAGF;;AACF;;AACF;;AACF;;AAEA;;;;AAhCyC;;AAAA;;AAGnB;;AAAA;;AAGA;;AAAA;;AAIA;;AAAA;;AAGA;;AAAA;;AAGA;;AAAA;;AAKA;;AAAA;;AAGA;;AAAA;;;;;;;;;sEDlBTA,Y,EAAY;cALxB,uDAKwB;eALd;AACTC,kBAAQ,EAAE,UADD;AAETC,qBAAW,EAAE,sBAFJ;AAGTC,mBAAS,EAAE,CAAC,qBAAD;AAHF,S;AAKc,Q;;;;;;;;;;;;;;;;;;;;;;AERzB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA,gD,CAEA;AAIA;AAKA;AAGA;AAGA;;;QAsCaC,S;;;;;YAAAA,S;AAAS,kBAFR,2DAEQ;;;;yBAATA,S;AAAS,O;AAAA,iBAHT,E;AAAE,gBAVJ,CACP,uEADO,EAEP,oEAFO,EAGP,0DAHO,EAIP,kEAJO,EAKP,sEALO,EAMP,4FANO,EAOP,8EAPO,EAQP,qEARO,CAUI;;;;0HAGFA,S,EAAS;AAAA,uBAxBlB,2DAwBkB,EAvBlB,8EAuBkB,EAtBlB,2EAsBkB,EArBlB,sEAqBkB,EApBlB,mEAoBkB,EAnBlB,+EAmBkB,EAlBlB,+EAkBkB,EAjBlB,2FAiBkB,EAhBlB,4EAgBkB,EAflB,+EAekB;AAfD,kBAGjB,uEAHiB,EAIjB,oEAJiB,EAKjB,0DALiB,EAMjB,kEANiB,EAOjB,sEAPiB,EAQjB,4FARiB,EASjB,8EATiB,EAUjB,qEAViB;AAeC,O;AALF,K;;;;;sEAKPA,S,EAAS;cA1BrB,sDA0BqB;eA1BZ;AACRC,sBAAY,EAAE,CACZ,2DADY,EAEZ,8EAFY,EAGZ,2EAHY,EAIZ,sEAJY,EAKZ,mEALY,EAMZ,+EANY,EAOZ,+EAPY,EAQZ,2FARY,EASZ,4EATY,EAUZ,+EAVY,CADN;AAaRZ,iBAAO,EAAE,CACP,uEADO,EAEP,oEAFO,EAGP,0DAHO,EAIP,kEAJO,EAKP,sEALO,EAMP,4FANO,EAOP,8EAPO,EAQP,qEARO,CAbD;AAuBRa,mBAAS,EAAE,EAvBH;AAwBRC,mBAAS,EAAE,CAAC,2DAAD;AAxBH,S;AA0BY,Q;;;;;;;;;;;;;;;;;;ACvDtB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QA2BaC,qB;;;AAGX,qCAAoBC,IAApB,EAA8CC,MAA9C,EAA8D;AAAA;;AAA1C,aAAAD,IAAA,GAAAA,IAAA;AAA0B,aAAAC,MAAA,GAAAA,MAAA;AAAkB;;;;kCAE9CC,K,EAAa;AAC7BC,sBAAY,CAACC,OAAb,CAAqB,YAArB,EAAmCF,KAAnC;AACA,eAAKA,KAAL,GAAaA,KAAb;AACD;;;mCAEc;AACb,cAAI,CAAC,KAAKA,KAAV,EAAiB;AACf,iBAAKA,KAAL,GAAaC,YAAY,CAACE,OAAb,CAAqB,YAArB,CAAb;AACD;;AACD,iBAAO,KAAKH,KAAZ;AACD;;;gCAGCI,M,EACAC,G,EACAC,I,EAAmB;AAAA;;AAEnB,cAAIC,KAAJ;;AAEA,cAAIH,MAAM,KAAK,MAAf,EAAuB;AACrBG,iBAAK,GAAG,KAAKT,IAAL,CAAUU,IAAV,gBAAuBH,GAAvB,GAA8BC,IAA9B,CAAR;AACD,WAFD,MAEO;AACLC,iBAAK,GAAG,KAAKT,IAAL,CAAUW,GAAV,gBAAsBJ,GAAtB,GAA6B;AACnCK,qBAAO,EAAE;AAAEC,6BAAa,mBAAY,KAAKC,QAAL,EAAZ;AAAf;AAD0B,aAA7B,CAAR;AAGD;;AAED,cAAMC,OAAO,GAAGN,KAAK,CAACO,IAAN,CACd,2DAAI,UAACC,IAAD,EAAyB;AAC3B,gBAAIA,IAAI,CAACf,KAAT,EAAgB;AACd,mBAAI,CAACgB,SAAL,CAAeD,IAAI,CAACf,KAApB;AACD;;AACD,mBAAOe,IAAP;AACD,WALD,CADc,CAAhB;AASA,iBAAOF,OAAP;AACD;;;iCAEY;AACX,eAAKb,KAAL,GAAa,EAAb;AACAiB,gBAAM,CAAChB,YAAP,CAAoBiB,UAApB,CAA+B,YAA/B;AACA,eAAKnB,MAAL,CAAYoB,aAAZ,CAA0B,GAA1B;AACD;;;yCAEoB;AACnB,cAAMnB,KAAK,GAAG,KAAKY,QAAL,EAAd;AACA,cAAIQ,OAAJ;;AACA,cAAIpB,KAAJ,EAAW;AACToB,mBAAO,GAAGpB,KAAK,CAACqB,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAV;AACAD,mBAAO,GAAGH,MAAM,CAACK,IAAP,CAAYF,OAAZ,CAAV;AACA,mBAAOG,IAAI,CAACC,KAAL,CAAWJ,OAAX,CAAP;AACD,WAJD,MAIO;AACL,mBAAO,IAAP;AACD;AACF;;;qCAEgB;AACf,cAAMd,IAAI,GAAG,KAAKmB,cAAL,EAAb;;AACA,cAAInB,IAAJ,EAAU;AACR,mBAAOA,IAAI,CAACoB,GAAL,GAAWC,IAAI,CAACC,GAAL,KAAa,IAA/B;AACD,WAFD,MAEO;AACL,mBAAO,KAAP;AACD;AACF;;;iCAEetB,I,EAAkB;AAChC,iBAAO,KAAKO,OAAL,CAAa,MAAb,EAAqB,eAArB,EAAsCP,IAAtC,CAAP;AACD;;;8BAEYA,I,EAAkB;AAC7B,iBAAO,KAAKO,OAAL,CAAa,MAAb,EAAqB,YAArB,EAAmCP,IAAnC,CAAP;AACD;;;kCAEa;AACZ,iBAAO,KAAKO,OAAL,CAAa,KAAb,EAAoB,UAApB,CAAP;AACD;;;;;;;uBAjFUhB,qB,EAAqB,uH,EAAA,8G;AAAA,K;;;aAArBA,qB;AAAqB,eAArBA,qBAAqB,K;AAAA,kBAFpB;;;;;sEAEDA,qB,EAAqB;cAHjC,wDAGiC;eAHtB;AACVgC,oBAAU,EAAE;AADF,S;AAGsB,Q;;;;;;;;;;;;;;;;;;;;;;;;AC3BlC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAO,QAAMC,oBAAoB,GAAG,IAAIC,GAAJ,CAAwB,CAC1D,CAAC,WAAD,EAAc,WAAd,CAD0D,EAE1D,CAAC,SAAD,EAAY,SAAZ,CAF0D,EAG1D,CAAC,SAAD,EAAY,QAAZ,CAH0D,EAI1D,CAAC,SAAD,EAAY,SAAZ,CAJ0D,EAK1D,CAAC,cAAD,EAAiB,YAAjB,CAL0D,CAAxB,CAA7B;AAQA,QAAMC,OAAO,GAAG,CACrB;AAAEC,WAAK,EAAE,EAAT;AAAaC,UAAI,EAAE;AAAnB,KADqB,EAErB;AAAED,WAAK,EAAE,CAAT;AAAYC,UAAI,EAAE;AAAlB,KAFqB,EAGrB;AAAED,WAAK,EAAE,CAAT;AAAYC,UAAI,EAAE;AAAlB,KAHqB,EAIrB;AAAED,WAAK,EAAE,CAAT;AAAYC,UAAI,EAAE;AAAlB,KAJqB,EAKrB;AAAED,WAAK,EAAE,CAAT;AAAYC,UAAI,EAAE;AAAlB,KALqB,EAMrB;AAAED,WAAK,EAAE,CAAT;AAAYC,UAAI,EAAE;AAAlB,KANqB,EAOrB;AAAED,WAAK,EAAE,CAAT;AAAYC,UAAI,EAAE;AAAlB,KAPqB,EAQrB;AAAED,WAAK,EAAE,CAAT;AAAYC,UAAI,EAAE;AAAlB,KARqB,EASrB;AAAED,WAAK,EAAE,CAAT;AAAYC,UAAI,EAAE;AAAlB,KATqB,EAUrB;AAAED,WAAK,EAAE,CAAT;AAAYC,UAAI,EAAE;AAAlB,KAVqB,CAAhB;AAaA,QAAMC,WAAW,GAAwB,IAAIJ,GAAJ,CAAQ,CACtD,CAAC,WAAD,EAAc,CAAd,CADsD,EAEtD,CAAC,SAAD,EAAY,CAAZ,CAFsD,EAGtD,CAAC,SAAD,EAAY,CAAZ,CAHsD,EAItD,CAAC,SAAD,EAAY,CAAZ,CAJsD,EAKtD,CAAC,cAAD,EAAiB,CAAjB,CALsD,CAAR,CAAzC;;;;;;;;;;;;;;;;ACraU;;;;;;AAEE;;;;;;AAVJ;;AACE;;AACE;;AAGG;;AAAc;;AAEnB;;AACA;;AAKF;;;;;;;;AATM;;AAAA;;AACC;;AAAA;;AAMH;;AAAA;;;;;;;;;;;;;;;;;;;;AAWN;;AACE;;AAMA;;AACE;;AAA8C;;AAE5C;;AACF;;AACE;;AAAI;;AAA0B;;AAC9B;;AACE;;AAAG;;AAAsC;;AAC3C;;AACF;;AACF;;AACA;;AACA;;AACE;;AAGE;;AACF;;AACA;;AAAmD;;AAIjD;;AACJ;;AACA;;AAGE;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAEA;;AAAU;;AAAI;;AAChB;;AACA;;AAGE;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAEA;;AAAU;;AAAM;;AAClB;;AACF;;;;;;;;AA3CI;;AAAA;;AAM8C;;AAAA;;AAIxC;;AAAA;;AAEC;;AAAA;;AAIJ;;AAAA;;AAGD;;AAAA;;AAEA;;AAAA;;AAEQ;;AAAA;;AAAyC;;AAAA;;;;;;AAqBvD;;AACG;;AAAkB;;;;;;;;AAWb;;AAGE;AAAA;;AAAA;;AAAA;AAAA;;AAEA;;AAAM;;AAAW;;AACjB;;AAAwB;;AAAM;;AAChC;;;;;;AALE;;AAGM;;AAAA;;;;;;;;AAaN;;AAGE;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAEA;;AAEF;;;;;;AALE;;AAGA;;AAAA;;;;;;AAyBF;;AAGG;;AAAiB;;;;;;AADlB;;AACC;;AAAA;;;;;;AAXP;;AAME;;AAAW;;AAAM;;AACjB;;AACE;;AAKF;;AACF;;;;;;AALM;;AAAA;;;;;;AAMN;;AAGE;;AAAW;;AAAM;;AACjB;;AAKF;;;;;;AACA;;AAME;;AAMF;;;;;;AACA;;AAUE;;AAAW;;AAAU;;AACrB;;AAKA;;AAIA;;AACF;;;;;;AARI;;AAAA;;AAKA;;AAAA;;;;;;AAIJ;;AAWE;;AAAW;;AAAQ;;AACnB;;AAKA;;AAIA;;AACF;;;;;;AARI;;AAAA;;AAKA;;AAAA;;;;;;ACrLR;;AACG;;AAAiB;;;;;;AADuB;;AACxC;;AAAA;;;;;;AATP;;AAME;;AAAW;;AAAM;;AACjB;;AACE;;AAGF;;AACF;;;;;;AAJgB;;AAAA;;;;;;AAKhB;;AAGE;;AAAW;;AAAM;;AACjB;;AAKF;;;;;;AACA;;AAME;;AAMF;;;;QF1BSK,iB;;;AA0BX,iCACUC,EADV,EAEUjD,IAFV,EAGSkD,IAHT,EAISC,MAJT,EAKSC,IALT,EAK2B;AAAA;;AAAA;;AAJjB,aAAAH,EAAA,GAAAA,EAAA;AACA,aAAAjD,IAAA,GAAAA,IAAA;AACD,aAAAkD,IAAA,GAAAA,IAAA;AACA,aAAAC,MAAA,GAAAA,MAAA;AACA,aAAAC,IAAA,GAAAA,IAAA;AAvBT,aAAAC,OAAA,GAAU,6CAAV;AAEA,aAAAC,UAAA,GAAa,CACX;AAAEC,yBAAe,EAAE,WAAnB;AAAgCT,cAAI,EAAE,WAAtC;AAAmDU,eAAK,EAAE;AAA1D,SADW,EAEX;AAAED,yBAAe,EAAE,SAAnB;AAA8BT,cAAI,EAAE,SAApC;AAA+CU,eAAK,EAAE;AAAtD,SAFW,EAGX;AAAED,yBAAe,EAAE,QAAnB;AAA6BT,cAAI,EAAE,SAAnC;AAA8CU,eAAK,EAAE;AAArD,SAHW,EAIX;AACED,yBAAe,EAAE,SADnB;AAEET,cAAI,EAAE,SAFR;AAGEU,eAAK,EAAE;AAHT,SAJW,EASX;AAAED,yBAAe,EAAE,YAAnB;AAAiCT,cAAI,EAAE,cAAvC;AAAuDU,eAAK,EAAE;AAA9D,SATW,CAAb;;AAgDA,aAAAC,WAAA,GAAc,YAAM;AAClB,gBAAI,CAACzD,IAAL,CAAU0D,OAAV,GAAoBC,SAApB,CAA8B,UAACzC,IAAD,EAAU;AACtC,kBAAI,CAAC0C,WAAL,CAAiB1C,IAAjB;AACD,WAFD;AAGD,SAJD;;AAMA,aAAA0C,WAAA,GAAc,UAAC1C,IAAD,EAAU;AACtB,gBAAI,CAAC2C,QAAL,GAAgB3C,IAAI,CAAC2C,QAArB;;AAEA,gBAAI,CAACC,WAAL;;AACA,gBAAI,CAACC,YAAL;;AACA,gBAAI,CAACC,cAAL;AACD,SAND;;AAQA,aAAAD,YAAA,GAAe,YAAY;AACzB,gBAAI,CAACF,QAAL,CAAcI,IAAd,CAAmB,UAACC,CAAD,EAAIC,CAAJ;AAAA,mBACjB,kDAAY9C,GAAZ,CAAgB6C,CAAC,CAACE,MAAlB,IAA4B,kDAAY/C,GAAZ,CAAgB8C,CAAC,CAACC,MAAlB,CAA5B,GAAwD,CAAC,CAAzD,GAA6D,CAD5C;AAAA,WAAnB;AAGD,SAJD;;AAMA,aAAAJ,cAAA,GAAiB,YAAY;AAC3B,gBAAI,CAACK,eAAL,GAAuB,MAAI,CAACR,QAAL,CAAcS,MAAd,CACrB,UAACC,KAAD;AAAA,mBAAW,MAAI,CAACC,OAAL,CAAanD,GAAb,CAAiB,2DAAqBA,GAArB,CAAyBkD,KAAK,CAACH,MAA/B,CAAjB,EAAyDvB,KAApE;AAAA,WADqB,CAAvB;AAGD,SAJD;;AAwGA,aAAA4B,cAAA,GAAiB,UAACC,GAAD,EAAyB;AACxC,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,GAAG,CAACE,MAAJ,GAAa,CAAjC,EAAoCD,CAAC,EAArC,EAAyC;AACvC,gBACE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqBE,QAArB,CAA8BH,GAAG,CAACI,MAAJ,CAAWH,CAAX,CAA9B,KACAD,GAAG,CAACI,MAAJ,CAAWH,CAAC,GAAG,CAAf,KAAqB,GAFvB,EAGE;AACAD,iBAAG,GACDA,GAAG,CAACK,SAAJ,CAAc,CAAd,EAAiBJ,CAAC,GAAG,CAArB,IAA0B,GAA1B,GAAgCD,GAAG,CAACK,SAAJ,CAAcJ,CAAC,GAAG,CAAlB,EAAqBD,GAAG,CAACE,MAAJ,GAAa,CAAlC,CADlC;AAED;AACF;;AACD,iBAAOF,GAAG,CAACM,OAAJ,CAAY,eAAZ,EAA6B,EAA7B,CAAP;AACD,SAXD;;AArJE,aAAKR,OAAL,GAAevB,EAAE,CAACgC,KAAH,CAAS;AACtBC,mBAAS,EAAE,IADW;AAEtBC,iBAAO,EAAE,KAFa;AAGtBC,gBAAM,EAAE,KAHc;AAItBC,iBAAO,EAAE,IAJa;AAKtBC,oBAAU,EAAE;AALU,SAAT,CAAf;AAQA,aAAKC,gBAAL,GAAwBtC,EAAE,CAACgC,KAAH,CAAS;AAC/BO,eAAK,EAAE,EADwB;AAE/BpB,gBAAM,EAAE,SAFuB;AAG/BqB,gBAAM,EAAE,EAHuB;AAI/BC,0BAAgB,EAAE,CAJa;AAK/BC,gBAAM,EAAE,EALuB;AAM/BC,mBAAS,EAAErD,IAAI,CAACC,GAAL,EANoB;AAO/BqD,iBAAO,EAAEtD,IAAI,CAACC,GAAL;AAPsB,SAAT,CAAxB;AASD;;;;mCAEO;AACN,eAAKiB,WAAL;AAEA,eAAKqC,SAAL;AACD;;;oCA4BW;AAAA;;AACV,eAAKC,4BAAL;AAEA,eAAKvB,OAAL,CAAawB,YAAb,CAA0BrC,SAA1B,CAAoC,YAAM;AACxC,kBAAI,CAACK,cAAL;AACD,WAFD;AAGD;;;uDAE2B;AAAA;;AAC1B,eAAKuB,gBAAL,CACGlE,GADH,CACO,OADP,EAEG2E,YAFH,CAEgBtE,IAFhB,CAEqB,oEAAa,GAAb,CAFrB,EAGGiC,SAHH,CAGa,UAACsC,SAAD,EAAe;AACxB,kBAAI,CAAC/C,IAAL,CAAUgD,iBAAV,CAA4BD,SAA5B,EAAuCtC,SAAvC,CAAiD,UAACwC,KAAD,EAAW;AAC1D,oBAAI,CAACC,cAAL,GAAsBD,KAAtB;AACD,aAFD;AAGD,WAPH;AAQD;;;qCAEYjD,I,EAAM;AACjB,eAAKmD,aAAL,GAAqB,CAACnD,IAAI,CAACoD,UAAL,CAAgBd,KAAjB,CAArB;AACA,eAAKe,SAAL,GAAiBrD,IAAjB;AAEA,eAAKqC,gBAAL,CAAsBlE,GAAtB,CAA0B,OAA1B,EAAmCmF,KAAnC;AACD;;;4CAEmB;AAAA;;AAClB,cAAMC,wBAAwB,GAAI;AAAA,gBAChCrC,MADgC,QAChCA,MADgC;AAAA,gBAEhCuB,MAFgC,QAEhCA,MAFgC;AAAA,gBAGhCC,SAHgC,QAGhCA,SAHgC;AAAA,gBAIhCC,OAJgC,QAIhCA,OAJgC;AAAA,gBAKhCJ,MALgC,QAKhCA,MALgC;AAAA,gBAMhCC,gBANgC,QAMhCA,gBANgC;AAAA,mBAO3B;AAAEtB,oBAAM,EAANA,MAAF;AAAUuB,oBAAM,EAANA,MAAV;AAAkBC,uBAAS,EAATA,SAAlB;AAA6BC,qBAAO,EAAPA,OAA7B;AAAsCJ,oBAAM,EAANA,MAAtC;AAA8CC,8BAAgB,EAAhBA;AAA9C,aAP2B;AAAA,WAAD,CAQ/B,KAAKH,gBAAL,CAAsBmB,WAAtB,EAR+B,CAAjC;;AAWAD,kCAAwB,CAACf,gBAAzB,GACE,KAAKH,gBAAL,CAAsBlE,GAAtB,CAA0B,QAA1B,EAAoCwB,KAApC,IAA6C,WAA7C,GACI,KAAK0D,SAAL,CAAeD,UAAf,CAA0BK,SAD9B,GAEI,KAAKpB,gBAAL,CAAsBlE,GAAtB,CAA0B,kBAA1B,EAA8CwB,KAHpD;AAKA,cAAM+D,kBAAkB;AACtBC,oBAAQ,EAAE,KAAKN,SAAL,CAAehH;AADH,aAEnBkH,wBAFmB,CAAxB;AAKA,eAAKvD,IAAL,CAAU4D,iBAAV,CAA4BF,kBAA5B,EAAgDjD,SAAhD,CAA0D,UAACoD,GAAD,EAAS;AACjE,kBAAI,CAACtD,WAAL;AACD,WAFD;AAIA,eAAK4C,aAAL,GAAqB,EAArB;AACA,eAAKd,gBAAL,CAAsBiB,KAAtB;AACD;;;+CAEsBK,Q,EAAU;AAAA;;AAC/B,eAAK3D,IAAL,CAAU8D,sBAAV,CAAiCH,QAAjC,EAA2ClD,SAA3C,CAAqD,UAACoD,GAAD,EAAS;AAC5D,kBAAI,CAACtD,WAAL;AACD,WAFD;AAGD;;;4CAEmBc,K,EAAsB;AAAA;;AACxC,eAAKrB,IAAL,CAAU+D,mBAAV,CAA8B1C,KAA9B,EAAqCZ,SAArC,CAA+C,UAACoD,GAAD,EAAS;AACtD,kBAAI,CAACtD,WAAL;AACD,WAFD;AAGD;;;gDAEuBoD,Q,EAAQ;AAAA;;AAC9B,cAAMK,SAAS,GAAG,KAAK/D,MAAL,CAAYgE,IAAZ,CAAiBC,6BAAjB,EAAgD;AAChEC,iBAAK,EAAE,OADyD;AAEhEC,kBAAM,EAAE;AAFwD,WAAhD,CAAlB;AAKAJ,mBAAS,CAACK,WAAV,GAAwB5D,SAAxB,CAAkC,UAAC6D,YAAD,EAAkB;AAClD,gBAAIA,YAAJ,EAAkB,MAAI,CAACC,sBAAL,CAA4BZ,QAA5B;AACnB,WAFD;AAGD;;;gDAEuBtC,K,EAAoB;AAAA;;AAC1C,cAAM2C,SAAS,GAAG,KAAK/D,MAAL,CAAYgE,IAAZ,CAAiBO,iBAAjB,EAAoC;AACpDL,iBAAK,EAAE,MAD6C;AAEpDC,kBAAM,EAAE,MAF4C;AAGpD3F,gBAAI,EAAE4C;AAH8C,WAApC,CAAlB;AAMA2C,mBAAS,CAACK,WAAV,GAAwB5D,SAAxB,CAAkC,UAACgE,YAAD,EAAkB;AAClD,gBAAI,CAACA,YAAL,EAAmB;;AACnB,kBAAI,CAACV,mBAAL,CAAyBU,YAAzB;AACD,WAHD;AAID;;;sCAEa;AACZ,eAAKC,KAAL,GAAa,KAAK/D,QAAL,GACT,KAAKT,IAAL,CAAUyE,QAAV,CAAmB,KAAKhE,QAAxB,CADS,GAET,KAAKT,IAAL,CAAU0E,IAAV,EAFJ;AAGD;;;;;;;uBApLU9E,iB,EAAiB,2H,EAAA,8I,EAAA,4H,EAAA,mI,EAAA,4H;AAAA,K;;;YAAjBA,iB;AAAiB,mC;AAAA;AAAA;AAAA;AAAA,O;AAAA,e;AAAA,c;AAAA,yxE;AAAA;AAAA;ACxB9B;;AACE;;AACE;;AACE;;AAAgB;;AAAO;;AACvB;;AACE;;AAcF;;AACF;;AACF;;AACA;;AAIE;;AACE;;AA8CA;;AAGF;;AACF;;AACA;;AACE;;AACE;;AACE;;AAA0C;;AAAU;;AACpD;;AAAqC;AAAA,mBAAY,IAAA+E,iBAAA,EAAZ;AAA+B,WAA/B;;AACnC;;AACE;;AACE;;AAQA;;AASA;;AACE;;AAQF;;AACF;;AACF;;AACA;;AACE;;AACE;;AAAW;;AAAM;;AACjB;;AACE;;AAA8B;;AAAS;;AACvC;;AAA4B;;AAAO;;AACnC;;AAA4B;;AAAO;;AACnC;;AAA4B;;AAAO;;AACnC;;AAAiC;;AAAY;;AAC/C;;AACF;;AACA;;AAeA;;AAUA;;AAaA;;AAsBA;;AAuBF;;AACA;;AAIE;AAAA,mBAAS,IAAAxC,gBAAA,QAAT;AAAiC,WAAjC;;AAEA;;AACF;;AACA;;AAOE;;AACF;;AACF;;AACF;;AACF;;AACF;;AACA;;AACE;;AACE;;AAAgB;;AAAK;;AACrB;;AACE;;AAAI;;AAAgC;;AACpC;;AAAI;;AAA4B;;AAChC;;AAAI;;AAA2B;;AAC/B;;AAAI;;AAA4B;;AAChC;;AAAI;;AAAoC;;AACxC;;AAAI;;AAAiC;;AACrC;;AAAI;;AAAyC;;AAC/C;;AACF;;AACF;;AACF;;;;;;;;AAhPe;;AAAA;;AACF;;AAAA;;AAmBT;;AAAA;;AAGY;;AAAA;;AA8CiB;;AAAA;;AASnB;;AAAA;;AAIE;;AAAA;;AAaA;;AAAA,4FAAwB,iBAAxB,EAAwB,GAAxB;;AAKE;;AAAA;;AAsBJ;;AAAA;;AAeA;;AAAA;;AAUA;;AAAA;;AAeA;;AAAA;;AAsBA;;AAAA;;AA8CF;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;;;;;;;;sEDxNCvC,iB,EAAiB;cAL7B,uDAK6B;eALnB;AACT9C,kBAAQ,EAAE,cADD;AAETC,qBAAW,EAAE,2BAFJ;AAGTC,mBAAS,EAAE,CAAC,2BAAD;AAHF,S;AAKmB,Q;;;;;;;;;;;;;;gBAI3B;;;gBACA;;;;;QAmMUsH,iB;;;AAIX,iCACSR,SADT,EAEkCS,YAFlC,EAGS1E,EAHT,EAGwB;AAAA;;AAFf,aAAAiE,SAAA,GAAAA,SAAA;AACyB,aAAAS,YAAA,GAAAA,YAAA;AACzB,aAAA1E,EAAA,GAAAA,EAAA;AALT,aAAAI,OAAA,GAAU,6CAAV;AAOE,aAAK2E,qBAAL,GAA6B/E,EAAE,CAACgC,KAAH,CAAS;AACpCb,gBAAM,EAAEuD,YAAY,CAACvD,MADe;AAEpCqB,gBAAM,EAAEkC,YAAY,CAAClC,MAFe;AAGpCwC,qBAAW,EAAEN,YAAY,CAACjC,gBAHU;AAIpCC,gBAAM,EAAEgC,YAAY,CAAChC,MAJe;AAKpCC,mBAAS,EAAE+B,YAAY,CAAC/B,SALY;AAMpCC,iBAAO,EAAE8B,YAAY,CAAC9B;AANc,SAAT,CAA7B;AAQD;;;;sCAEU;AACT,cAAMqC,GAAG,GAAG,KAAKP,YAAL,CAAkBd,QAA9B;AACA,cAAM3D,IAAI,GAAG,KAAKyE,YAAL,CAAkBzE,IAA/B;AACA,eAAKyE,YAAL,GAAoB;AAClBd,oBAAQ,EAAEqB,GADQ;AAElB9D,kBAAM,EAAE,KAAK4D,qBAAL,CAA2B3G,GAA3B,CAA+B,QAA/B,EAAyCwB,KAF/B;AAGlB4C,kBAAM,EAAE,KAAKuC,qBAAL,CAA2B3G,GAA3B,CAA+B,QAA/B,EAAyCwB,KAH/B;AAIlB6C,4BAAgB,EAAE,KAAKsC,qBAAL,CAA2B3G,GAA3B,CAA+B,aAA/B,EAA8CwB,KAJ9C;AAKlB8C,kBAAM,EAAE,KAAKqC,qBAAL,CAA2B3G,GAA3B,CAA+B,QAA/B,EAAyCwB,KAL/B;AAMlB+C,qBAAS,EAAE,KAAKoC,qBAAL,CAA2B3G,GAA3B,CAA+B,WAA/B,EAA4CwB,KANrC;AAOlBgD,mBAAO,EAAE,KAAKmC,qBAAL,CAA2B3G,GAA3B,CAA+B,SAA/B,EAA0CwB,KAPjC;AAQlBK,gBAAI,EAAEA;AARY,WAApB;AAUA,eAAKgE,SAAL,CAAeiB,KAAf,CAAqB,KAAKR,YAA1B;AACD;;;iCAEK;AACJ,eAAKT,SAAL,CAAeiB,KAAf,CAAqB,KAArB;AACD;;;oCAEQ;AACP,eAAKjB,SAAL,CAAeiB,KAAf,CAAqB,KAArB;AACD;;;;;;;uBAzCUT,iB,EAAiB,sI,EAAA,gEAMlB,wEANkB,C,EAMH,2H;AAAA,K;;;YANdA,iB;AAAiB,mD;AAAA;AAAA;AAAA,O;AAAA,e;AAAA,a;AAAA,ixB;AAAA;AAAA;AEhO9B;;AACE;;AAAO;;AAAiC;;AAA6B;;AACvE;;AACA;;AACE;;AACE;;AACE;;AAAW;;AAAM;;AACjB;;AACE;;AAA8B;;AAAS;;AACvC;;AAA4B;;AAAO;;AACnC;;AAA4B;;AAAO;;AACnC;;AAA4B;;AAAO;;AACnC;;AAAiC;;AAAY;;AAC/C;;AACF;;AACA;;AAaA;;AAUA;;AAaF;;AACF;;AACA;;AACE;;AAGE;AAAA,mBAAS,IAAAU,MAAA,EAAT;AAAiB,WAAjB;;AAEA;;AACF;;AACA;;AAGE;AAAA,mBAAS,IAAAC,WAAA,EAAT;AAAsB,WAAtB;;AAGA;;AACF;;AACF;;;;AApE0C;;AAAA;;AAGlC;;AAAA;;AAYF;;AAAA;;AAaA;;AAAA;;AAUA;;AAAA;;;;;;;;;sEFyLOX,iB,EAAiB;cAJ7B,uDAI6B;eAJnB;AACTxH,kBAAQ,EAAE,8BADD;AAETC,qBAAW,EAAE;AAFJ,S;AAImB,Q;;;;;;kBAMzB,oD;mBAAO,wE;;;;;;;gBALT;;;;;QA+CUiH,6B;;;AACX,6CAAmBF,SAAnB,EAA2E;AAAA;;AAAxD,aAAAA,SAAA,GAAAA,SAAA;AAA0D;;;;sCAElE;AACT,eAAKA,SAAL,CAAeiB,KAAf,CAAqB,IAArB;AACD;;;iCAEK;AACJ,eAAKjB,SAAL,CAAeiB,KAAf,CAAqB,KAArB;AACD;;;oCAEQ;AACP,eAAKjB,SAAL,CAAeiB,KAAf,CAAqB,KAArB;AACD;;;;;;;uBAbUf,6B,EAA6B,sI;AAAA,K;;;YAA7BA,6B;AAA6B,oD;AAAA,c;AAAA,a;AAAA,0S;AAAA;AAAA;AGhR1C;;AACE;;AACF;;AACA;;AACE;;AAGE;AAAA,mBAAS,IAAAgB,MAAA,EAAT;AAAiB,WAAjB;;AAEA;;AACF;;AACA;;AAIE;AAAA,mBAAS,IAAAE,WAAA,EAAT;AAAsB,WAAtB;;AAGA;;AACF;;AACF;;;;;;;;;sEH4PalB,6B,EAA6B;cAJzC,uDAIyC;eAJ/B;AACTlH,kBAAQ,EAAE,+BADD;AAETC,qBAAW,EAAE;AAFJ,S;AAI+B,Q;;;;;;;;;;;;;;;;;;;;;;AI/Q1C;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAQaoI,Y;;;AACX,4BAAoB7H,IAApB,EAA8CV,IAA9C,EAA2E;AAAA;;AAAvD,aAAAU,IAAA,GAAAA,IAAA;AAA0B,aAAAV,IAAA,GAAAA,IAAA;AAA+B;;;;0CAEpDwF,K,EAAa;AACpC,iBAAO,KAAK9E,IAAL,CAAUW,GAAV,CAAc,YAAd,EAA4B;AACjCmH,kBAAM,EAAE;AACNhD,mBAAK,EAAEA;AADD;AADyB,WAA5B,CAAP;AAKD;;;0CAEwBiD,a,EAA4B;AACnD,iBAAO,KAAK/H,IAAL,CAAUU,IAAV,CACL,4BADK,EAEL;AACEgD,kBAAM,EAAEqE,aAAa,CAACrE,MADxB;AAEEsE,iBAAK,EAAED,aAAa,CAACC,KAFvB;AAGEhD,4BAAgB,EAAE+C,aAAa,CAAC/C,gBAHlC;AAIED,kBAAM,EAAEgD,aAAa,CAAChD,MAJxB;AAKEE,kBAAM,EAAE8C,aAAa,CAAC9C,MALxB;AAMEC,qBAAS,EAAE6C,aAAa,CAAC7C,SAN3B;AAOEC,mBAAO,EAAE4C,aAAa,CAAC5C;AAPzB,WAFK,EAWL;AACE2C,kBAAM,EAAE;AACN3B,sBAAQ,EAAE4B,aAAa,CAAC5B;AADlB,aADV;AAIEvF,mBAAO,EAAE;AAAEC,2BAAa,mBAAY,KAAKvB,IAAL,CAAUwB,QAAV,EAAZ;AAAf;AAJX,WAXK,CAAP;AAkBD;;;4CAE0BiH,a,EAA4B;AACrD,iBAAO,KAAK/H,IAAL,CAAUiI,GAAV,CAAc,kCAAd,EAAkDF,aAAlD,EAAiE;AACtED,kBAAM,EAAE;AACN3B,sBAAQ,EAAE4B,aAAa,CAAC5B;AADlB,aAD8D;AAItEvF,mBAAO,EAAE;AAAEC,2BAAa,mBAAY,KAAKvB,IAAL,CAAUwB,QAAV,EAAZ;AAAf;AAJ6D,WAAjE,CAAP;AAMD;;;+CAE6BqF,Q,EAAgB;AAC5C,iBAAO,KAAKnG,IAAL,CAAUkI,MAAV,CAAiB,gCAAjB,EAAmD;AACxDJ,kBAAM,EAAE;AACN3B,sBAAQ,EAAEA;AADJ,aADgD;AAIxDvF,mBAAO,EAAE;AAAEC,2BAAa,mBAAY,KAAKvB,IAAL,CAAUwB,QAAV,EAAZ;AAAf;AAJ+C,WAAnD,CAAP;AAMD;;;;;;;uBAhDU+G,Y,EAAY,uH,EAAA,qI;AAAA,K;;;aAAZA,Y;AAAY,eAAZA,YAAY,K;AAAA,kBAFX;;;;;sEAEDA,Y,EAAY;cAHxB,wDAGwB;eAHb;AACV9F,oBAAU,EAAE;AADF,S;AAGa,Q;;;;;;;;;;;;;;;;;;;;;;;;ACTzB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACmCM;;AACE;;AAAI;;AAAiB;;AACrB;;AAAI;;AAAuC;;AAC3C;;AAAI;;AAAmC;;AACvC;;AAAI;;AAAwC;;AAC5C;;AAAI;;AAAgD;;AACtD;;;;;;AALM;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;;;;;AAEN;;AACE;;AACE;;AAEF;;AACF;;;;;;;;AAOE;;AAEE;AAAA;;AAAA;;AAAA;AAAA;;AAGA;;AACE;;AAIE;AAAA;;AAAA;;AAAA;AAAA;;AAJF;;AASF;;AACA;;AACE;;AACF;;AACF;;;;;;AATM;;AAAA;;;;;;AAUN;;AACE;;AACF;;;;;;AADE;;AAAA;;;;;;;;AAIF;;AAIE;AAAA;;AAAA;;AAAA,8CAA8B,IAA9B;AAAkC,SAAlC;;AAEA;;AAAU;;AAAI;;AAChB;;;;;;;;AACA;;AAIE;AAAA;;AAAA;;AAAA,8CAA8B,KAA9B;AAAmC,SAAnC;;AAEA;;AAAU;;AAAM;;AAClB;;;;QDlFKoG,gB;;;AASX,gCACU7I,IADV,EAEU8I,KAFV,EAGUC,SAHV,EAIUnB,KAJV,EAI6B;AAAA;;AAHnB,aAAA5H,IAAA,GAAAA,IAAA;AACA,aAAA8I,KAAA,GAAAA,KAAA;AACA,aAAAC,SAAA,GAAAA,SAAA;AACA,aAAAnB,KAAA,GAAAA,KAAA;AAXV,aAAAoB,WAAA,GAAwB,EAAxB;AAEA,aAAAC,kBAAA,GAA8B,KAA9B;AAUI;;;;mCAEO;AACT,eAAKC,iBAAL;AACD;;;4CAEgB;AAAA;;AACf,eAAKlJ,IAAL,CAAU0D,OAAV,GAAoBC,SAApB,CAA8B,UAACzC,IAAD,EAAU;AACtC,mBAAI,CAACiI,UAAL,GAAkBjI,IAAI,CAACiI,UAAvB;;AACA,mBAAI,CAACC,mBAAL,CAAyBlI,IAAI,CAACmI,OAA9B;AACD,WAHD;AAID;;;4CAEmBC,S,EAAmB;AAAA;;AACrC,eAAKN,WAAL,GAAmB,EAAnB;AACAM,mBAAS,CAACC,OAAV,CAAkB,UAAChK,EAAD,EAAQ;AACxB,mBAAI,CAACuJ,KAAL,CAAWU,OAAX,CAAmBjK,EAAnB,EAAuBoE,SAAvB,CAAiC,UAACzC,IAAD,EAAU;AACzC,qBAAI,CAAC8H,WAAL,CAAiBS,IAAjB,CAAsB,MAAD,OAAC,CAAD;AACnB7B,qBAAK,EAAE,OAAI,CAACA,KAAL,CAAWC,QAAX,CAAoB3G,IAAI,CAAC2C,QAAzB;AADY,eAAC,EAEjB3C,IAFiB,CAAtB;AAID,aALD;AAMD,WAPD;AAQD;;;2CAEe;AAAA;;AACd,eAAK4H,KAAL,CAAWY,gBAAX,CAA4B,KAAKC,aAAjC,EAAgDhG,SAAhD,CACE,UAACoD,GAAD,EAAS;AACP,mBAAI,CAACoC,UAAL,GAAkB,OAAI,CAACQ,aAAvB;AAEA,mBAAI,CAACV,kBAAL,GAA0B,KAA1B;AACA,mBAAI,CAACU,aAAL,GAAqB,EAArB;AACD,WANH,EAOE,UAACC,GAAD;AAAA,mBAAS,OAAI,CAACC,iBAAL,CAAuB,uCAAvB,CAAT;AAAA,WAPF;AASD;;;oCAEQ;AAAA;;AACP,eAAKf,KAAL,CAAWgB,SAAX,CAAqB,KAAKC,aAA1B,EAAyCpG,SAAzC,CACE,UAACoD,GAAD,EAAS;AACP,mBAAI,CAACmC,iBAAL;;AACA,mBAAI,CAACa,aAAL,GAAqB,EAArB;AACD,WAJH,EAKE,UAACH,GAAD,EAAS;AACP,mBAAI,CAACC,iBAAL,CACE,oCAAoC,OAAI,CAACE,aAD3C;AAGD,WATH;AAWD;;;0CAEiBC,O,EAAe;AAC/B,eAAKjB,SAAL,CAAe5B,IAAf,CAAoB6C,OAApB,EAA6B,OAA7B;AACD;;;;;;;uBAnEUnB,gB,EAAgB,8I,EAAA,4H,EAAA,wI,EAAA,4H;AAAA,K;;;YAAhBA,gB;AAAgB,kC;AAAA;AAAA;AAAA;AAAA,O;AAAA,e;AAAA,a;AAAA,6pC;AAAA;AAAA;ACc7B;;AACE;;AACF;;AACA;;AACE;;AAIE;;AACE;;AAOA;;AAMF;;AACF;;AACA;;AACE;;AACE;;AAAI;;AAAY;;AAChB;;AACE;;AAoBA;;AAGF;;AACA;;AACE;;AAQA;;AAQF;;AACF;;AACF;;AACA;;AACE;;AACE;;AAAI;;AAAa;;AACjB;;AACE;;AAAM;AAAA,mBAAU,IAAAiB,SAAA,EAAV;AAAqB,WAArB;;AACJ;;AACE;;AAIE;AAAA;AAAA;;AAJF;;AASF;;AACA;;AACE;;AACF;;AACF;;AACF;;AACF;;AACF;;AACF;;;;AAzFI;;AAAA;;AAGiC;;AAAA;;AAOA;;AAAA;;AAa3B;;AAAA;;AAmBE;;AAAA;;AAMF;;AAAA;;AAQA;;AAAA;;AAoBI;;AAAA;;;;;;;;;sEDhGDjB,gB,EAAgB;cAL5B,uDAK4B;eALlB;AACT3I,kBAAQ,EAAE,aADD;AAETC,qBAAW,EAAE,0BAFJ;AAGTC,mBAAS,EAAE,CAAC,0BAAD;AAHF,S;AAKkB,Q;;;;;;;;;;;;gBAK1B;;;gBAEA;;;;;;;;;;;;;;;;;;;;AEnBH;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACGM;;AACE;;AAA6B;;AAA8B;;AAQ7D;;;;;;AAR+B;;AAAA;;;;;;AAS/B;;AACE;;AACE;;AAEF;;AACF;;;;;;AAGA;;AACE;;AAAI;;AAAK;;AACT;;AAA8B;;AAAgC;;AAC9D;;AAA8B;;AAA4B;;AAC1D;;AAA8B;;AAA2B;;AACzD;;AAA8B;;AAA4B;;AAC1D;;AAA8B;;AAAoC;;AAClE;;AAA8B;;AAAiC;;AAC/D;;AACE;;AACF;;AACF;;;;;;AATgC;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AAE5B;;AAAA;;;;;;AAKJ;;AACE;;AAAI;;AAAe;;AACnB;;AACE;;AAAI;;AAAY;;AAkBlB;;AACF;;;;QDhDO6J,a;;;AAIX,6BACUjK,IADV,EAEUkK,YAFV,EAEoC;AAAA;;AAAA;;AAD1B,aAAAlK,IAAA,GAAAA,IAAA;AACA,aAAAkK,YAAA,GAAAA,YAAA;;AAOV,aAAA7H,cAAA,GAAiB,YAAM;AACrB,iBAAI,CAACrC,IAAL,CAAU0D,OAAV,GAAoBC,SAApB,CACE,UAACzC,IAAD,EAAU;AACR,mBAAI,CAACA,IAAL,GAAYA,IAAZ;AACA,mBAAI,CAAC0G,KAAL,GAAa,OAAI,CAACsC,YAAL,CAAkBrC,QAAlB,CAA2B3G,IAAI,CAAC2C,QAAhC,CAAb;AACD,WAJH,EAKE,UAAC+F,GAAD,EAAS;AACP,mBAAI,CAAC1I,IAAL,GAAY,IAAZ;AACD,WAPH;AASD,SAVD;AANI;;;;mCAEI;AACN,eAAKmB,cAAL;AACD;;;;;;;uBAXU4H,a,EAAa,8I,EAAA,4H;AAAA,K;;;YAAbA,a;AAAa,+B;AAAA,c;AAAA,a;AAAA,me;AAAA;AAAA;ACT1B;;AACE;;AACE;;AACE;;AAUA;;AAMF;;AACA;;AACE;;AAYF;;AACA;;AACE;;AAuBF;;AACF;;AACF;;;;AAzDW;;AAAA;;AAUA;;AAAA;;AAQqC;;AAAA;;AAcA;;AAAA;;;;;;;;;sED1BnCA,a,EAAa;cALzB,uDAKyB;eALf;AACT/J,kBAAQ,EAAE,UADD;AAETC,qBAAW,EAAE,uBAFJ;AAGTC,mBAAS,EAAE,CAAC,sBAAD;AAHF,S;AAKe,Q;;;;;;;;;;;;;;;;;;;;;;;;AET1B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAQa+J,c;;;AAMX,8BAAoBnK,IAApB,EAAyDW,MAAzD,EAAyE;AAAA;;AAArD,aAAAX,IAAA,GAAAA,IAAA;AAAqC,aAAAW,MAAA,GAAAA,MAAA;AALzD,aAAAyJ,WAAA,GAA4B;AAC1BC,eAAK,EAAE,EADmB;AAE1BC,kBAAQ,EAAE;AAFgB,SAA5B;AAK2E;;;;gCAEnE;AAAA;;AACN,eAAKtK,IAAL,CAAUuK,KAAV,CAAgB,KAAKH,WAArB,EAAkCzG,SAAlC,CACE,YAAM;AACJ,mBAAI,CAAChD,MAAL,CAAYoB,aAAZ,CAA0B,UAA1B;AACD,WAHH,EAIE,UAAC6H,GAAD,EAAS;AACPY,mBAAO,CAACC,KAAR,CAAcb,GAAd;AACD,WANH;AAQD;;;;;;;uBAjBUO,c,EAAc,8I,EAAA,uH;AAAA,K;;;YAAdA,c;AAAc,mC;AAAA,e;AAAA,a;AAAA,6gB;AAAA;AAAA;ACR3B;;AACE;;AACE;;AACE;;AAAgB;;AAAM;;AACxB;;AAEA;;AAAwB;AAAA,mBAAU,IAAAI,KAAA,EAAV;AAAiB,WAAjB;;AACtB;;AACE;;AACE;;AAME;AAAA;AAAA;;AANF;;AASF;;AAEA;;AACE;;AAME;AAAA;AAAA;;AANF;;AASF;;AACF;;AACA;;AACE;;AACF;;AACF;;AACF;;AACF;;;;AAtBY;;AAAA;;AAYA;;AAAA;;;;;;;;;sEDnBCJ,c,EAAc;cAJ1B,uDAI0B;eAJhB;AACThK,qBAAW,EAAE,wBADJ;AAETC,mBAAS,EAAE,CAAC,uBAAD;AAFF,S;AAIgB,Q;;;;;;;;;;;;;;;;;;;;;;;;AER3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOasK,gB;;;AAGX,gCAAoB1K,IAApB,EAAiD;AAAA;;AAA7B,aAAAA,IAAA,GAAAA,IAAA;AAA+B;;;;mCAExC;AAAA;;AACT,eAAKA,IAAL,CAAU0D,OAAV,GAAoBC,SAApB,CACE,UAACzC,IAAD,EAAU;AACR,mBAAI,CAACyJ,OAAL,GAAezJ,IAAf;AACD,WAHH,EAIE,UAAC0I,GAAD,EAAS;AACPY,mBAAO,CAACC,KAAR,CAAcb,GAAd;AACD,WANH;AAQD;;;;;;;uBAdUc,gB,EAAgB,8I;AAAA,K;;;YAAhBA,gB;AAAgB,mC;AAAA,e;AAAA,a;AAAA,oG;AAAA;AAAA;ACP7B;;AACE;;AACE;;AACE;;AAAgB;;AAAY;;AAC9B;;AACA;;AACE;;AACA;;AACE;;AAAI;;AAAS;;AACb;;AAAG;;AAAmB;;AACxB;;AACA;;AACA;;AACE;;AAAI;;AAAK;;AACT;;AAAG;;AAAoB;;AACzB;;AACF;;AACF;;AACF;;;;AATW;;AAAA;;AAKA;;AAAA;;;;;;;;;sEDPEA,gB,EAAgB;cAJ5B,uDAI4B;eAJlB;AACTvK,qBAAW,EAAE,0BADJ;AAETC,mBAAS,EAAE,CAAC,yBAAD;AAFF,S;AAIkB,Q;;;;;;;;;;;;;;;;;;;;;;AEP7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAQawK,iB;;;AAOX,iCAAoB5K,IAApB,EAAyDW,MAAzD,EAAyE;AAAA;;AAArD,aAAAX,IAAA,GAAAA,IAAA;AAAqC,aAAAW,MAAA,GAAAA,MAAA;AANzD,aAAAyJ,WAAA,GAA4B;AAC1BC,eAAK,EAAE,EADmB;AAE1BQ,cAAI,EAAE,EAFoB;AAG1BP,kBAAQ,EAAE;AAHgB,SAA5B;AAM2E;;;;mCAEhE,CAAE;;;mCAEF;AAAA;;AACT,eAAKtK,IAAL,CAAU8K,QAAV,CAAmB,KAAKV,WAAxB,EAAqCzG,SAArC,CACE,YAAM;AACJ,mBAAI,CAAChD,MAAL,CAAYoB,aAAZ,CAA0B,UAA1B;AACD,WAHH,EAIE,UAAC6H,GAAD,EAAS;AACPY,mBAAO,CAACC,KAAR,CAAcb,GAAd;AACD,WANH;AAQD;;;;;;;uBApBUgB,iB,EAAiB,8I,EAAA,uH;AAAA,K;;;YAAjBA,iB;AAAiB,mC;AAAA,e;AAAA,a;AAAA,kkB;AAAA;AAAA;ACR9B;;AACE;;AACE;;AACE;;AAAgB;;AAAQ;;AAC1B;;AAEA;;AAAwB;AAAA,mBAAU,IAAAE,QAAA,EAAV;AAAoB,WAApB;;AACtB;;AACE;;AACE;;AAME;AAAA;AAAA;;AANF;;AAQF;;AAEA;;AACE;;AAME;AAAA;AAAA;;AANF;;AAQF;;AAEA;;AACE;;AAME;AAAA;AAAA;;AANF;;AAQF;;AACF;;AAEA;;AACE;;AACF;;AACF;;AACF;;AACF;;;;AAhCY;;AAAA;;AAWA;;AAAA;;AAWA;;AAAA;;;;;;;;;sED7BCF,iB,EAAiB;cAJ7B,uDAI6B;eAJnB;AACTzK,qBAAW,EAAE,2BADJ;AAETC,mBAAS,EAAE,CAAC,0BAAD;AAFF,S;AAImB,Q;;;;;;;;;;;;;;;;;;;;;;;;AER9B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAMa2K,Y;;;AACX,8BAAc;AAAA;AAAE;;;;iCAEAlH,Q,EAAyB;AACvC,iBAAO;AACLqB,qBAAS,EAAErB,QAAQ,CAACS,MAAT,CAAgB,UAACC,KAAD;AAAA,qBAAWA,KAAK,CAACH,MAAN,IAAgB,WAA3B;AAAA,aAAhB,EAAwDQ,MAD9D;AAELO,mBAAO,EAAEtB,QAAQ,CAACS,MAAT,CAAgB,UAACC,KAAD;AAAA,qBAAWA,KAAK,CAACH,MAAN,IAAgB,SAA3B;AAAA,aAAhB,EAAsDQ,MAF1D;AAGLQ,kBAAM,EAAEvB,QAAQ,CAACS,MAAT,CAAgB,UAACC,KAAD;AAAA,qBAAWA,KAAK,CAACH,MAAN,IAAgB,SAA3B;AAAA,aAAhB,EAAsDQ,MAHzD;AAILS,mBAAO,EAAExB,QAAQ,CAACS,MAAT,CAAgB,UAACC,KAAD;AAAA,qBAAWA,KAAK,CAACH,MAAN,IAAgB,SAA3B;AAAA,aAAhB,EAAsDQ,MAJ1D;AAKLU,sBAAU,EAAEzB,QAAQ,CAACS,MAAT,CAAgB,UAACC,KAAD;AAAA,qBAAWA,KAAK,CAACH,MAAN,IAAgB,cAA3B;AAAA,aAAhB,EACTQ,MANE;AAOLoG,qBAAS,EAAE,KAAKC,YAAL,CAAkBpH,QAAlB,CAPN;AAQLqH,yBAAa,EAAE,KAAKC,gBAAL,CAAsBtH,QAAtB;AARV,WAAP;AAUD;;;qCAEoBA,Q,EAAyB;AAC5C,cAAIuH,KAAK,GAAG,CAAZ;AACAvH,kBAAQ,CAAC0F,OAAT,CAAiB,UAAChF,KAAD;AAAA,mBAAY6G,KAAK,IAAI7G,KAAK,CAACmB,gBAA3B;AAAA,WAAjB;AACA,iBAAO0F,KAAP;AACD;;;yCAEwBvH,Q,EAAyB;AAChD,cAAIA,QAAQ,CAACS,MAAT,CAAgB,UAACC,KAAD;AAAA,mBAAWA,KAAK,CAACkB,MAAjB;AAAA,WAAhB,EAAyCb,MAAzC,IAAmD,CAAvD,EACE,OAAO,wBAAP;AAEF,cAAIyG,WAAW,GAAG,CAAlB;AACA,cAAIC,eAAe,GAAG,CAAtB;AAEAzH,kBAAQ,CAAC0F,OAAT,CAAiB,UAAChF,KAAD,EAAW;AAC1B,gBAAIA,KAAK,CAACkB,MAAV,EAAkB;AAChB4F,yBAAW,IAAI9G,KAAK,CAACkB,MAArB;AACA6F,6BAAe;AAChB;AACF,WALD;AAOA,iBAAO,CAACC,IAAI,CAACC,KAAL,CAAYH,WAAW,GAAGC,eAAf,GAAkC,GAA7C,IAAoD,GAArD,EAA0DG,OAA1D,CAAkE,CAAlE,CAAP;AACD;;;+BAEG;AACF,iBAAO;AACLvG,qBAAS,EAAE,CADN;AAELC,mBAAO,EAAE,CAFJ;AAGLC,kBAAM,EAAE,CAHH;AAILC,mBAAO,EAAE,CAJJ;AAKLC,sBAAU,EAAE,CALP;AAML0F,qBAAS,EAAE,CANN;AAOLE,yBAAa,EAAE;AAPV,WAAP;AASD;;;;;;;uBAjDUH,Y;AAAY,K;;;aAAZA,Y;AAAY,eAAZA,YAAY,K;AAAA,kBAFX;;;;;sEAEDA,Y,EAAY;cAHxB,wDAGwB;eAHb;AACVtI,oBAAU,EAAE;AADF,S;AAGa,Q;;;;;;;;;;;;;;;;;;;;ACNzB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOaiJ,iB;;;AAEX,mCAAc;AAAA;AAAG;;;;mCAET,CACP;;;;;;;uBALUA,iB;AAAiB,K;;;YAAjBA,iB;AAAiB,mC;AAAA,c;AAAA,a;AAAA,4D;AAAA;AAAA;ACP9B;;AACE;;AACE;;AAAI;;AAAyB;;AAAkB;;AAAC;;AAAO;;AACzD;;AACF;;;;;;;;sEDGaA,iB,EAAiB;cAL7B,uDAK6B;eALnB;AACTxL,kBAAQ,EAAE,cADD;AAETC,qBAAW,EAAE,2BAFJ;AAGTC,mBAAS,EAAE,CAAC,2BAAD;AAHF,S;AAKmB,Q;;;;;;;;;;;;;;;;;;;;AEN9B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOauL,Y;;;AACX,4BAAoBjL,IAApB,EAA8CV,IAA9C,EAA2E;AAAA;;AAAvD,aAAAU,IAAA,GAAAA,IAAA;AAA0B,aAAAV,IAAA,GAAAA,IAAA;AAA+B;;;;gCAE9DT,E,EAAU;AACvB,iBAAO,KAAKmB,IAAL,CAAUW,GAAV,CAAc,eAAe9B,EAAE,CAACqM,QAAH,EAA7B,CAAP;AACD;;;kCAEgBzC,U,EAAkB;AACjC,iBAAO,KAAKzI,IAAL,CAAUU,IAAV,CACL,sBADK,EAEL;AAAE+H,sBAAU,EAAEA;AAAd,WAFK,EAGL;AACE7H,mBAAO,EAAE;AAAEC,2BAAa,mBAAY,KAAKvB,IAAL,CAAUwB,QAAV,EAAZ;AAAf;AADX,WAHK,CAAP;AAOD;;;yCAEuB2H,U,EAAkB;AACxC,iBAAO,KAAKzI,IAAL,CAAUU,IAAV,CACL,4BADK,EAEL;AACE+H,sBAAU,EAAEA;AADd,WAFK,EAKL;AACE7H,mBAAO,EAAE;AAAEC,2BAAa,mBAAY,KAAKvB,IAAL,CAAUwB,QAAV,EAAZ;AAAf;AADX,WALK,CAAP;AASD;;;;;;;uBA3BUmK,Y,EAAY,uH,EAAA,qI;AAAA,K;;;aAAZA,Y;AAAY,eAAZA,YAAY,K;AAAA,kBAFX;;;;;sEAEDA,Y,EAAY;cAHxB,wDAGwB;eAHb;AACVlJ,oBAAU,EAAE;AADF,S;AAGa,Q;;;;;;;;;;;;;;;;;;;;;;;;ACRzB;AAAA;;;AAAA;AAAA;AAAA,O,CAAA;AACA;AACA;;;AAEO,QAAMoJ,WAAW,GAAG;AACzBC,gBAAU,EAAE;AADa,KAApB;AAIP;;;;;;;AAOA;;;;;;;;;;;;;;;;;ACfA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAMA,QAAI,sEAAYA,UAAhB,EAA4B;AAC1B;AACD;;AAED,gFAAwB,eAAxB,CACmB,yDADnB,EAEGC,KAFH,CAES,UAACnC,GAAD;AAAA,aAASY,OAAO,CAACC,KAAR,CAAcb,GAAd,CAAT;AAAA,KAFT","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatNativeDateModule, MatRippleModule } from '@angular/material/core';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTreeModule } from '@angular/material/tree';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatDialogModule } from '@angular/material/dialog';\n\nconst materialModules = [\n  CdkTreeModule,\n  MatAutocompleteModule,\n  MatButtonModule,\n  MatCardModule,\n  MatCheckboxModule,\n  MatChipsModule,\n  MatDividerModule,\n  MatExpansionModule,\n  MatIconModule,\n  MatInputModule,\n  MatListModule,\n  MatMenuModule,\n  MatProgressSpinnerModule,\n  MatPaginatorModule,\n  MatRippleModule,\n  MatSelectModule,\n  MatSidenavModule,\n  MatSnackBarModule,\n  MatSortModule,\n  MatTableModule,\n  MatTabsModule,\n  MatToolbarModule,\n  MatFormFieldModule,\n  MatButtonToggleModule,\n  MatTreeModule,\n  OverlayModule,\n  PortalModule,\n  MatBadgeModule,\n  MatGridListModule,\n  MatRadioModule,\n  MatDatepickerModule,\n  MatTooltipModule,\n  MatNativeDateModule,\n  MatDialogModule,\n];\n\n@NgModule({\n  imports: [CommonModule, ...materialModules],\n  exports: [...materialModules],\n})\nexport class AngularMaterialModule {}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { ProfileComponent } from './profile/profile.component';\nimport { BooklistComponent } from './booklist/booklist.component';\nimport { FriendsComponent } from './friends/friends.component';\nimport { TimelineComponent } from './timeline/timeline.component';\n\nconst routes: Routes = [\n  { path: '', component: HomeComponent },\n  { path: 'login', component: LoginComponent },\n  { path: 'register', component: RegisterComponent },\n  { path: 'profile', component: ProfileComponent },\n  { path: 'booklist', component: BooklistComponent },\n  { path: 'friends', component: FriendsComponent },\n  { path: 'timeline', component: TimelineComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import { Component } from '@angular/core';\nimport { AuthenticationService } from './authentication.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {\n  constructor(public auth: AuthenticationService) {}\n}\n","<mat-toolbar color=\"primary\">\n  <mat-toolbar-row>\n    <a mat-button style=\"font-size: 2vh\" [routerLink]=\"'/'\">Book Hero</a>\n    <div fxShow=\"true\" fxFlex fxLayout>\n      <div fxFlex>\n        <a mat-button *ngIf=\"!auth.isLoggedIn()\" [routerLink]=\"'/login'\"\n          >Log in</a\n        >\n        <a mat-button *ngIf=\"!auth.isLoggedIn()\" [routerLink]=\"'/register'\"\n          >Sign up</a\n        >\n\n        <a mat-button *ngIf=\"auth.isLoggedIn()\" [routerLink]=\"'/booklist'\"\n          >My List</a\n        >\n        <a mat-button *ngIf=\"auth.isLoggedIn()\" [routerLink]=\"'/timeline'\"\n          >Timeline</a\n        >\n        <a mat-button *ngIf=\"auth.isLoggedIn()\" [routerLink]=\"'/friends'\"\n          >Friends</a\n        >\n      </div>\n      <div fxFlex fxLayoutAlign=\"flex-end center\">\n        <a mat-button *ngIf=\"auth.isLoggedIn()\" [routerLink]=\"'/profile'\"\n          >Profile</a\n        >\n        <a mat-button *ngIf=\"auth.isLoggedIn()\" (click)=\"auth.logout()\"\n          >Logout</a\n        >\n      </div>\n    </div>\n  </mat-toolbar-row>\n</mat-toolbar>\n\n<router-outlet></router-outlet>\n","import { BrowserModule } from '@angular/platform-browser';\n\n// Routing\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\n// Angular Material\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { AngularMaterialModule } from './angular-material.module';\nimport { NgModule } from '@angular/core';\n\n// FormsModule\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n// Angular Flex Layout\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\n// Components\nimport { RegisterComponent } from './register/register.component';\nimport { ProfileComponent } from './profile/profile.component';\nimport { LoginComponent } from './login/login.component';\nimport { HomeComponent } from './home/home.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { BooklistComponent } from './booklist/booklist.component';\nimport { updateEntryDialog } from './booklist/booklist.component';\nimport { deleteEntryVerificationDialog } from './booklist/booklist.component';\nimport { FriendsComponent } from './friends/friends.component';\nimport { TimelineComponent } from './timeline/timeline.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    RegisterComponent,\n    ProfileComponent,\n    LoginComponent,\n    HomeComponent,\n    BooklistComponent,\n    updateEntryDialog,\n    deleteEntryVerificationDialog,\n    FriendsComponent,\n    TimelineComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    AngularMaterialModule,\n    FlexLayoutModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface UserDetails {\n  _id: string;\n  email: string;\n  name: string;\n  exp: number;\n  iat: number;\n}\n\ninterface TokenResponse {\n  token: string;\n}\n\nexport interface TokenPayload {\n  email: string;\n  password: string;\n  name?: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthenticationService {\n  private token: string;\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  private saveToken(token: string): void {\n    localStorage.setItem('auth-token', token);\n    this.token = token;\n  }\n\n  public getToken(): string {\n    if (!this.token) {\n      this.token = localStorage.getItem('auth-token');\n    }\n    return this.token;\n  }\n\n  private request(\n    method: 'post' | 'get',\n    uri: 'auth/login' | 'auth/register' | 'users/me',\n    user?: TokenPayload\n  ): Observable<any> {\n    let base$;\n\n    if (method === 'post') {\n      base$ = this.http.post(`/api/${uri}`, user);\n    } else {\n      base$ = this.http.get(`/api/${uri}`, {\n        headers: { Authorization: `Bearer ${this.getToken()}` },\n      });\n    }\n\n    const request = base$.pipe(\n      map((data: TokenResponse) => {\n        if (data.token) {\n          this.saveToken(data.token);\n        }\n        return data;\n      })\n    );\n\n    return request;\n  }\n\n  public logout(): void {\n    this.token = '';\n    window.localStorage.removeItem('auth-token');\n    this.router.navigateByUrl('/');\n  }\n\n  public getUserDetails(): UserDetails {\n    const token = this.getToken();\n    let payload;\n    if (token) {\n      payload = token.split('.')[1];\n      payload = window.atob(payload);\n      return JSON.parse(payload);\n    } else {\n      return null;\n    }\n  }\n\n  public isLoggedIn(): boolean {\n    const user = this.getUserDetails();\n    if (user) {\n      return user.exp > Date.now() / 1000;\n    } else {\n      return false;\n    }\n  }\n\n  public register(user: TokenPayload): Observable<any> {\n    return this.request('post', 'auth/register', user);\n  }\n\n  public login(user: TokenPayload): Observable<any> {\n    return this.request('post', 'auth/login', user);\n  }\n\n  public profile(): Observable<any> {\n    return this.request('get', 'users/me');\n  }\n}\n","export const StatusMapToCamelCase = new Map<string, string>([\n  ['Completed', 'completed'],\n  ['Dropped', 'dropped'],\n  ['On-hold', 'onHold'],\n  ['Reading', 'reading'],\n  ['Plan to read', 'planToRead'],\n]);\n\nexport const Ratings = [\n  { value: 10, text: '10 - masterpiece' },\n  { value: 9, text: '9 - really good' },\n  { value: 8, text: '8 - great' },\n  { value: 7, text: '7 - good' },\n  { value: 6, text: '6 - okay' },\n  { value: 5, text: '5 - not great' },\n  { value: 4, text: '4 - bad' },\n  { value: 3, text: '3 - really bad' },\n  { value: 2, text: '2 - horrible' },\n  { value: 1, text: '1 - abysmal' },\n];\n\nexport const statusOrder: Map<string, number> = new Map([\n  ['Completed', 1],\n  ['Dropped', 2],\n  ['On-hold', 3],\n  ['Reading', 4],\n  ['Plan to read', 5],\n]);\n\nexport interface Book {\n  title: string;\n  author: string;\n  pageCount: number;\n  coverImage: string;\n  blurb?: string;\n  categories: string[];\n  datePublished: Date;\n}\n\nexport interface BookListEntry {\n  volumeId: string;\n  book?: Book;\n  status: string;\n  notes?: string;\n  currentPageCount: number;\n  rating?: number;\n  review?: number;\n  startDate?: Date;\n  endDate?: Date;\n}\n","import { debounceTime } from 'rxjs/operators';\nimport { Component, Inject, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport {\n  MatDialog,\n  MatDialogRef,\n  MAT_DIALOG_DATA,\n} from '@angular/material/dialog';\n\nimport {\n  BookListEntry,\n  Ratings,\n  StatusMapToCamelCase,\n  statusOrder,\n} from './book';\nimport { AuthenticationService } from '../authentication.service';\nimport { BooksService } from '../books.service';\nimport { StatsService, Stats } from '../stats.service';\n\n@Component({\n  selector: 'app-booklist',\n  templateUrl: './booklist.component.html',\n  styleUrls: ['./booklist.component.scss'],\n})\nexport class BooklistComponent implements OnInit {\n  bookList: BookListEntry[];\n  visibleBookList: BookListEntry[];\n\n  @Input() filters: FormGroup;\n  @Input() addBookFormGroup: FormGroup;\n\n  stats: Stats;\n  ratings = Ratings;\n\n  checkboxes = [\n    { formControlName: 'completed', text: 'Completed', color: 'lightgreen' },\n    { formControlName: 'dropped', text: 'Dropped', color: 'rgb(226, 82, 65)' },\n    { formControlName: 'onHold', text: 'On-hold', color: 'lightcoral' },\n    {\n      formControlName: 'reading',\n      text: 'Reading',\n      color: 'rgb(60, 150, 236)',\n    },\n    { formControlName: 'planToRead', text: 'Plan to read', color: 'lightgray' },\n  ];\n\n  newBookOptions: any[];\n  titleSelected: string[];\n  bookToAdd: any;\n\n  constructor(\n    private fb: FormBuilder,\n    private auth: AuthenticationService,\n    public book: BooksService,\n    public dialog: MatDialog,\n    public stat: StatsService\n  ) {\n    this.filters = fb.group({\n      completed: true,\n      dropped: false,\n      onHold: false,\n      reading: true,\n      planToRead: false,\n    });\n\n    this.addBookFormGroup = fb.group({\n      title: '',\n      status: 'Reading',\n      rating: '',\n      currentPageCount: 0,\n      review: '',\n      startDate: Date.now(),\n      endDate: Date.now(),\n    });\n  }\n\n  ngOnInit(): void {\n    this.getBooklist();\n\n    this.onChanges();\n  }\n\n  getBooklist = () => {\n    this.auth.profile().subscribe((user) => {\n      this.setBookList(user);\n    });\n  };\n\n  setBookList = (user) => {\n    this.bookList = user.bookList;\n\n    this.updateStats();\n    this.sortBookList();\n    this.filterBookList();\n  };\n\n  sortBookList = (): void => {\n    this.bookList.sort((a, b) =>\n      statusOrder.get(a.status) < statusOrder.get(b.status) ? -1 : 1\n    );\n  };\n\n  filterBookList = (): void => {\n    this.visibleBookList = this.bookList.filter(\n      (entry) => this.filters.get(StatusMapToCamelCase.get(entry.status)).value\n    );\n  };\n\n  onChanges() {\n    this.updateNewBookOptionsDropDown();\n\n    this.filters.valueChanges.subscribe(() => {\n      this.filterBookList();\n    });\n  }\n\n  updateNewBookOptionsDropDown(): void {\n    this.addBookFormGroup\n      .get('title')\n      .valueChanges.pipe(debounceTime(250))\n      .subscribe((userInput) => {\n        this.book.searchBookByTitle(userInput).subscribe((books) => {\n          this.newBookOptions = books;\n        });\n      });\n  }\n\n  setBookToAdd(book) {\n    this.titleSelected = [book.volumeInfo.title];\n    this.bookToAdd = book;\n\n    this.addBookFormGroup.get('title').reset();\n  }\n\n  addBookToUserList() {\n    const dataFromAddBookFormGroup = (({\n      status,\n      review,\n      startDate,\n      endDate,\n      rating,\n      currentPageCount,\n    }) => ({ status, review, startDate, endDate, rating, currentPageCount }))(\n      this.addBookFormGroup.getRawValue()\n    );\n\n    dataFromAddBookFormGroup.currentPageCount =\n      this.addBookFormGroup.get('status').value == 'Completed'\n        ? this.bookToAdd.volumeInfo.pageCount\n        : this.addBookFormGroup.get('currentPageCount').value;\n\n    const booklistEntryToAdd: BookListEntry = {\n      volumeId: this.bookToAdd.id,\n      ...dataFromAddBookFormGroup,\n    };\n\n    this.book.addToUserBooklist(booklistEntryToAdd).subscribe((res) => {\n      this.getBooklist();\n    });\n\n    this.titleSelected = [];\n    this.addBookFormGroup.reset();\n  }\n\n  removeBookFromUserList(volumeId) {\n    this.book.removeFromUserBooklist(volumeId).subscribe((res) => {\n      this.getBooklist();\n    });\n  }\n\n  updateBooklistEntry(entry: BookListEntry) {\n    this.book.updateBooklistEntry(entry).subscribe((res) => {\n      this.getBooklist();\n    });\n  }\n\n  deleteEntryVerification(volumeId): void {\n    const dialogRef = this.dialog.open(deleteEntryVerificationDialog, {\n      width: '300px',\n      height: '200px',\n    });\n\n    dialogRef.afterClosed().subscribe((shouldDelete) => {\n      if (shouldDelete) this.removeBookFromUserList(volumeId);\n    });\n  }\n\n  toggleUpdateEntryDialog(entry: BookListEntry): void {\n    const dialogRef = this.dialog.open(updateEntryDialog, {\n      width: '20vw',\n      height: '50vh',\n      data: entry,\n    });\n\n    dialogRef.afterClosed().subscribe((updatedEntry) => {\n      if (!updatedEntry) return;\n      this.updateBooklistEntry(updatedEntry);\n    });\n  }\n\n  updateStats() {\n    this.stats = this.bookList\n      ? this.stat.getStats(this.bookList)\n      : this.stat.init();\n  }\n\n  removeHTMLTags = (str: string): string => {\n    for (let i = 0; i < str.length - 1; i++) {\n      if (\n        ['.', ',', '!', '?'].includes(str.charAt(i)) &&\n        str.charAt(i + 1) != ' '\n      ) {\n        str =\n          str.substring(0, i + 1) + ' ' + str.substring(i + 1, str.length + 1);\n      }\n    }\n    return str.replace(/(<([^>]+)>)/gi, '');\n  };\n}\n\n@Component({\n  selector: 'booklist-entry-update-dialog',\n  templateUrl: './booklist-entry-update-dialog.html',\n})\nexport class updateEntryDialog {\n  @Input() updatedEntryFormGroup: FormGroup;\n  ratings = Ratings;\n\n  constructor(\n    public dialogRef: MatDialogRef<updateEntryDialog>,\n    @Inject(MAT_DIALOG_DATA) public updatedEntry: BookListEntry,\n    public fb: FormBuilder\n  ) {\n    this.updatedEntryFormGroup = fb.group({\n      status: updatedEntry.status,\n      rating: updatedEntry.rating,\n      currentPage: updatedEntry.currentPageCount,\n      review: updatedEntry.review,\n      startDate: updatedEntry.startDate,\n      endDate: updatedEntry.endDate,\n    });\n  }\n\n  updateEntry(): void {\n    const vId = this.updatedEntry.volumeId;\n    const book = this.updatedEntry.book;\n    this.updatedEntry = {\n      volumeId: vId,\n      status: this.updatedEntryFormGroup.get('status').value,\n      rating: this.updatedEntryFormGroup.get('rating').value,\n      currentPageCount: this.updatedEntryFormGroup.get('currentPage').value,\n      review: this.updatedEntryFormGroup.get('review').value,\n      startDate: this.updatedEntryFormGroup.get('startDate').value,\n      endDate: this.updatedEntryFormGroup.get('endDate').value,\n      book: book,\n    };\n    this.dialogRef.close(this.updatedEntry);\n  }\n\n  cancel(): void {\n    this.dialogRef.close(false);\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close(false);\n  }\n}\n\n@Component({\n  selector: 'book-list-entry-delete-dialog',\n  templateUrl: './booklist-entry-delete-dialog.html',\n})\nexport class deleteEntryVerificationDialog {\n  constructor(public dialogRef: MatDialogRef<deleteEntryVerificationDialog>) {}\n\n  deleteEntry(): void {\n    this.dialogRef.close(true);\n  }\n\n  cancel(): void {\n    this.dialogRef.close(false);\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close(false);\n  }\n}\n","<mat-grid-list cols=\"5\" rowHeight=\"25vh\">\n  <mat-grid-tile colspan=\"1\" rowspan=\"2\">\n    <mat-card class=\"container\">\n      <mat-card-title>Filters</mat-card-title>\n      <section [formGroup]=\"filters\">\n        <div *ngFor=\"let box of checkboxes\">\n          <p>\n            <mat-checkbox\n              color=\"primary\"\n              [formControlName]=\"box.formControlName\"\n              >{{ box.text }}</mat-checkbox\n            >\n          </p>\n          <div\n            class=\"filter-legend\"\n            [ngStyle]=\"{ 'background-color': box.color }\"\n            *ngIf=\"filters.get(box.formControlName).value\"\n          ></div>\n        </div>\n      </section>\n    </mat-card>\n  </mat-grid-tile>\n  <mat-grid-tile\n    colspan=\"3\"\n    rowspan=\"{{ bookList.length < 6 ? 6 : bookList.length + 1 }}\"\n  >\n    <div class=\"book-list-container\">\n      <mat-card *ngFor=\"let entry of visibleBookList\" class=\"book-list-entry\">\n        <img\n          src=\"{{ entry.book.coverImage }}\"\n          alt=\"\"\n          class=\"book-list-entry-image\"\n        />\n\n        <div class=\"book-list-entry-text\">\n          <mat-card-title class=\"book-list-entry-title\">{{\n            entry.book.title\n          }}</mat-card-title>\n          <mat-card-content>\n            <h3>by {{ entry.book.author }}</h3>\n            <div class=\"line-clamp\">\n              <p>{{ removeHTMLTags(entry.book.blurb) }}</p>\n            </div>\n          </mat-card-content>\n        </div>\n        <div [ngClass]=\"[entry.status, 'book-list-entry-status-bar']\"></div>\n        <div class=\"book-list-entry-info\">\n          <mat-card\n            [ngClass]=\"['rating-' + entry.rating, 'book-list-entry-rating']\"\n          >\n            {{ entry.rating ? entry.rating : '-' }} / 10\n          </mat-card>\n          <mat-card [ngClass]=\"['book-list-entry-category']\">{{\n            entry.book.categories[0]\n              ? entry.book.categories[0]\n              : 'No genre information'\n          }}</mat-card>\n        </div>\n        <button\n          class=\"book-list-entry-update-button\"\n          mat-icon-button\n          (click)=\"toggleUpdateEntryDialog(entry)\"\n        >\n          <mat-icon>edit</mat-icon>\n        </button>\n        <button\n          class=\"book-list-entry-delete-button\"\n          mat-icon-button\n          (click)=\"deleteEntryVerification(entry.volumeId)\"\n        >\n          <mat-icon>delete</mat-icon>\n        </button>\n      </mat-card>\n      <mat-card class=\"no-books\" *ngIf=\"bookList.length == 0\"\n        >Nothing to display</mat-card\n      >\n    </div>\n  </mat-grid-tile>\n  <mat-grid-tile colspan=\"1\" rowspan=\"3\">\n    <div class=\"add-a-book-container\">\n      <mat-card class=\"container\">\n        <mat-card-title class=\"add-a-book-header\">Add a book</mat-card-title>\n        <form [formGroup]=\"addBookFormGroup\" (ngSubmit)=\"addBookToUserList()\">\n          <mat-form-field>\n            <mat-chip-list #chipList>\n              <mat-chip\n                *ngFor=\"let title of titleSelected\"\n                [removable]=\"true\"\n                (removed)=\"titleSelected = []\"\n              >\n                <span>{{ title }}</span>\n                <mat-icon matChipRemove>cancel</mat-icon>\n              </mat-chip>\n              <input\n                #autocompleteInput\n                type=\"text\"\n                placeholder=\"Enter title\"\n                matInput\n                formControlName=\"title\"\n                [matAutocomplete]=\"auto\"\n                [matChipInputFor]=\"chipList\"\n              />\n              <mat-autocomplete #auto=\"matAutocomplete\">\n                <mat-option\n                  *ngFor=\"let option of newBookOptions\"\n                  [value]=\"option.volumeInfo.title\"\n                  (onSelectionChange)=\"setBookToAdd(option)\"\n                >\n                  {{ option.volumeInfo.title }} by\n                  {{ option.volumeInfo.authors }}\n                </mat-option>\n              </mat-autocomplete>\n            </mat-chip-list>\n          </mat-form-field>\n          <mat-card-content>\n            <mat-form-field>\n              <mat-label>Status</mat-label>\n              <mat-select name=\"addBookStatus\" formControlName=\"status\">\n                <mat-option value=\"Completed\">Completed</mat-option>\n                <mat-option value=\"Dropped\">Dropped</mat-option>\n                <mat-option value=\"On-hold\">On-hold</mat-option>\n                <mat-option value=\"Reading\">Reading</mat-option>\n                <mat-option value=\"Plan to read\">Plan to read</mat-option>\n              </mat-select>\n            </mat-form-field>\n            <mat-form-field\n              *ngIf=\"\n                addBookFormGroup.get('status').value == 'Completed' ||\n                addBookFormGroup.get('status').value == 'Dropped'\n              \"\n            >\n              <mat-label>Rating</mat-label>\n              <mat-select name=\"addBookRating\" formControlName=\"rating\">\n                <mat-option\n                  *ngFor=\"let option of ratings\"\n                  [value]=\"option.value\"\n                  >{{ option.text }}</mat-option\n                >\n              </mat-select>\n            </mat-form-field>\n            <mat-form-field\n              *ngIf=\"addBookFormGroup.get('status').value == 'Completed'\"\n            >\n              <mat-label>Review</mat-label>\n              <textarea\n                matInput\n                formControlName=\"review\"\n                name=\"addBookReview\"\n              ></textarea>\n            </mat-form-field>\n            <mat-form-field\n              *ngIf=\"\n                addBookFormGroup.get('status').value == 'Reading' ||\n                addBookFormGroup.get('status').value == 'On-hold'\n              \"\n            >\n              <input\n                matInput\n                name=\"currentPageCount\"\n                placeholder=\"Current Page\"\n                formControlName=\"currentPageCount\"\n              />\n            </mat-form-field>\n            <mat-form-field\n              style=\"width: 85%\"\n              appearance=\"fill\"\n              *ngIf=\"\n                !(\n                  addBookFormGroup.get('status').value == 'Plan to read' ||\n                  addBookFormGroup.get('status').value == null\n                )\n              \"\n            >\n              <mat-label>Start date</mat-label>\n              <input\n                matInput\n                [matDatepicker]=\"picker\"\n                formControlName=\"startDate\"\n              />\n              <mat-datepicker-toggle\n                matSuffix\n                [for]=\"picker\"\n              ></mat-datepicker-toggle>\n              <mat-datepicker #picker></mat-datepicker>\n            </mat-form-field>\n            <mat-form-field\n              style=\"width: 85%\"\n              appearance=\"fill\"\n              *ngIf=\"\n                !(\n                  addBookFormGroup.get('status').value == 'Plan to read' ||\n                  addBookFormGroup.get('status').value == 'Reading' ||\n                  addBookFormGroup.get('status').value == null\n                )\n              \"\n            >\n              <mat-label>End date</mat-label>\n              <input\n                matInput\n                [matDatepicker]=\"picker\"\n                formControlName=\"endDate\"\n              />\n              <mat-datepicker-toggle\n                matSuffix\n                [for]=\"picker\"\n              ></mat-datepicker-toggle>\n              <mat-datepicker #picker></mat-datepicker>\n            </mat-form-field>\n          </mat-card-content>\n          <button\n            mat-raised-button\n            class=\"btn-block\"\n            style=\"position: absolute; bottom: 10%; width: 90%\"\n            (click)=\"addBookFormGroup.reset()\"\n          >\n            Clear\n          </button>\n          <button\n            mat-raised-button\n            color=\"primary\"\n            class=\"btn-block\"\n            type=\"submit\"\n            style=\"position: absolute; bottom: 2%; width: 90%\"\n          >\n            Add entry!\n          </button>\n        </form>\n      </mat-card>\n    </div>\n  </mat-grid-tile>\n  <mat-grid-tile colspan=\"1\" rowspan=\"2\">\n    <mat-card class=\"container\">\n      <mat-card-title>Stats</mat-card-title>\n      <mat-card-content>\n        <h3>Completed: {{ stats.completed }}</h3>\n        <h3>Dropped: {{ stats.dropped }}</h3>\n        <h3>On-hold: {{ stats.onHold }}</h3>\n        <h3>Reading: {{ stats.reading }}</h3>\n        <h3>Plan to read: {{ stats.planToRead }}</h3>\n        <h3>Pages read: {{ stats.pagesRead }}</h3>\n        <h3>Average rating: {{ stats.averageRating }}</h3>\n      </mat-card-content>\n    </mat-card>\n  </mat-grid-tile>\n</mat-grid-list>\n","<h1 mat-dialog-title style=\"text-align: center\">\n  Update <span style=\"font-style: italic\">{{ updatedEntry.book.title }}</span>\n</h1>\n<div class=\"add-a-book-container\">\n  <form [formGroup]=\"updatedEntryFormGroup\">\n    <mat-form-field>\n      <mat-label>Status</mat-label>\n      <mat-select name=\"addBookStatus\" formControlName=\"status\">\n        <mat-option value=\"Completed\">Completed</mat-option>\n        <mat-option value=\"Dropped\">Dropped</mat-option>\n        <mat-option value=\"On-hold\">On-hold</mat-option>\n        <mat-option value=\"Reading\">Reading</mat-option>\n        <mat-option value=\"Plan to read\">Plan to read</mat-option>\n      </mat-select>\n    </mat-form-field>\n    <mat-form-field\n      *ngIf=\"\n                updatedEntryFormGroup.get('status').value == 'Completed' ||\n                updatedEntryFormGroup.get('status').value == 'Dropped'\n              \"\n    >\n      <mat-label>Rating</mat-label>\n      <mat-select name=\"addBookRating\" formControlName=\"rating\">\n        <mat-option *ngFor=\"let option of ratings\" [value]=\"option.value\"\n          >{{ option.text }}</mat-option\n        >\n      </mat-select>\n    </mat-form-field>\n    <mat-form-field\n      *ngIf=\"updatedEntryFormGroup.get('status').value == 'Completed'\"\n    >\n      <mat-label>Review</mat-label>\n      <textarea\n        matInput\n        formControlName=\"review\"\n        name=\"addBookReview\"\n      ></textarea>\n    </mat-form-field>\n    <mat-form-field\n      *ngIf=\"\n                updatedEntryFormGroup.get('status').value == 'Reading' ||\n                updatedEntryFormGroup.get('status').value == 'On-hold'\n              \"\n    >\n      <input\n        matInput\n        name=\"currentPage\"\n        placeholder=\"Current Page\"\n        formControlName=\"currentPage\"\n      />\n    </mat-form-field>\n  </form>\n</div>\n<div>\n  <button\n    mat-raised-button\n    style=\"margin-right: 1vw; margin-left: 2.8vw\"\n    (click)=\"cancel()\"\n  >\n    Cancel\n  </button>\n  <button\n    mat-raised-button\n    color=\"primary\"\n    (click)=\"updateEntry()\"\n    cdkFocusInitial\n  >\n    Update\n  </button>\n</div>\n","<h1 mat-dialog-title style=\"text-align: center\">\n  Are you sure you want to delete this entry?\n</h1>\n<div style=\"margin-top: 10%\">\n  <button\n    mat-raised-button\n    style=\"margin-left: 18%; float: left\"\n    (click)=\"cancel()\"\n  >\n    Cancel\n  </button>\n  <button\n    mat-stroked-button\n    style=\"margin-right: 18%; float: right\"\n    color=\"warn\"\n    (click)=\"deleteEntry()\"\n    cdkFocusInitial\n  >\n    Delete\n  </button>\n</div>\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BookListEntry } from './booklist/book';\nimport { AuthenticationService } from './authentication.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BooksService {\n  constructor(private http: HttpClient, private auth: AuthenticationService) {}\n\n  public searchBookByTitle(title: string): Observable<any> {\n    return this.http.get('/api/books', {\n      params: {\n        title: title,\n      },\n    });\n  }\n\n  public addToUserBooklist(booklistEntry: BookListEntry): Observable<any> {\n    return this.http.post(\n      '/api/users/add-to-booklist',\n      {\n        status: booklistEntry.status,\n        notes: booklistEntry.notes,\n        currentPageCount: booklistEntry.currentPageCount,\n        rating: booklistEntry.rating,\n        review: booklistEntry.review,\n        startDate: booklistEntry.startDate,\n        endDate: booklistEntry.endDate,\n      },\n      {\n        params: {\n          volumeId: booklistEntry.volumeId,\n        },\n        headers: { Authorization: `Bearer ${this.auth.getToken()}` },\n      }\n    );\n  }\n\n  public updateBooklistEntry(booklistEntry: BookListEntry): Observable<any> {\n    return this.http.put('/api/users/update-booklist-entry', booklistEntry, {\n      params: {\n        volumeId: booklistEntry.volumeId,\n      },\n      headers: { Authorization: `Bearer ${this.auth.getToken()}` },\n    });\n  }\n\n  public removeFromUserBooklist(volumeId: string): Observable<any> {\n    return this.http.delete('api/users/remove-from-booklist', {\n      params: {\n        volumeId: volumeId,\n      },\n      headers: { Authorization: `Bearer ${this.auth.getToken()}` },\n    });\n  }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { AuthenticationService } from '../authentication.service';\nimport { StatsService } from '../stats.service';\nimport { UsersService } from '../users.service';\nimport { Friend } from './friends';\n\n@Component({\n  selector: 'app-friends',\n  templateUrl: './friends.component.html',\n  styleUrls: ['./friends.component.scss'],\n})\nexport class FriendsComponent implements OnInit {\n  friendCode: string;\n  friendsList: Friend[] = [];\n\n  updatingFriendCode: boolean = false;\n  @Input() newFriendCode: string;\n\n  @Input() addFriendCode: string;\n\n  constructor(\n    private auth: AuthenticationService,\n    private users: UsersService,\n    private _snackBar: MatSnackBar,\n    private stats: StatsService\n  ) {}\n\n  ngOnInit() {\n    this.updateFriendsList();\n  }\n\n  updateFriendsList(): void {\n    this.auth.profile().subscribe((user) => {\n      this.friendCode = user.friendCode;\n      this.generateFriendsList(user.friends);\n    });\n  }\n\n  generateFriendsList(friendIds: number[]): void {\n    this.friendsList = [];\n    friendIds.forEach((id) => {\n      this.users.getUser(id).subscribe((user) => {\n        this.friendsList.push({\n          stats: this.stats.getStats(user.bookList),\n          ...user,\n        });\n      });\n    });\n  }\n\n  updateFriendCode(): void {\n    this.users.updateFriendCode(this.newFriendCode).subscribe(\n      (res) => {\n        this.friendCode = this.newFriendCode;\n\n        this.updatingFriendCode = false;\n        this.newFriendCode = '';\n      },\n      (err) => this.openErrorSnackBar('This friend code is already in use...')\n    );\n  }\n\n  addFriend(): void {\n    this.users.addFriend(this.addFriendCode).subscribe(\n      (res) => {\n        this.updateFriendsList();\n        this.addFriendCode = '';\n      },\n      (err) => {\n        this.openErrorSnackBar(\n          'No user found with friend code ' + this.addFriendCode\n        );\n      }\n    );\n  }\n\n  openErrorSnackBar(message: string): void {\n    this._snackBar.open(message, 'clear');\n  }\n}\n","<!-- <div class=\"container\">\n  <div class=\"wrapper\">\n    <h1>Friends Page Coming Soon<span class=\"dot\">.</span></h1>\n  </div> -->\n<!-- </div> -->\n\n<!-- <mat-card\n  ><form (submit)=\"updateFriendCode()\" class=\"update-friend-code-form\">\n    <mat-form-field class=\"formField\">\n      <mat-card-subtitle style=\"margin-bottom: 1vh\"\n        >Friend code:</mat-card-subtitle\n      >\n      <input\n        style=\"margin-top: 2vh\"\n        matInput\n        class=\"inputField\"\n        name=\"friendCode\"\n        [(ngModel)]=\"newFriendCode\"\n        [placeholder]=\"!newFriendCode ? friendCode : 'Friend Code'\"\n        type=\"text\"\n      />\n    </mat-form-field>\n    <button mat-stroked-button color=\"accent\" class=\"btn-block\">Update</button>\n  </form></mat-card\n> -->\n\n<h1 style=\"padding-left: 4.5vw; padding-top: 20px; font-size: 4vh\">\n  Friends List\n</h1>\n<mat-grid-list cols=\"4\" rowHeight=\"20vh\">\n  <mat-grid-tile\n    colspan=\"3\"\n    [rowspan]=\"friendsList.length ? friendsList.length + 1 : 2\"\n  >\n    <div class=\"friends-list-container\">\n      <mat-card class=\"friend-entry\" *ngFor=\"let friend of friendsList\">\n        <h1>{{ friend.name }}</h1>\n        <h3>Completed: {{ friend.stats.completed }}</h3>\n        <h3>Reading: {{ friend.stats.reading }}</h3>\n        <h3>Pages read: {{ friend.stats.pagesRead }}</h3>\n        <h3>Average rating: {{ friend.stats.averageRating }}</h3>\n      </mat-card>\n      <mat-card class=\"friend-entry\" *ngIf=\"friendsList.length == 0\">\n        <h3>\n          Add some friends using the card on the right, or share your friend\n          code with others!\n        </h3>\n      </mat-card>\n    </div>\n  </mat-grid-tile>\n  <mat-grid-tile colspan=\"1\" rowspan=\"1\">\n    <mat-card class=\"container\">\n      <h1>Friend code:</h1>\n      <div style=\"width: 40%; height: 100%; float: left\">\n        <form\n          *ngIf=\"updatingFriendCode\"\n          (submit)=\"updateFriendCode()\"\n          class=\"update-friend-code-form\"\n        >\n          <mat-form-field class=\"formField\">\n            <input\n              matInput\n              class=\"inputField\"\n              name=\"friendCode\"\n              [(ngModel)]=\"newFriendCode\"\n              placeholder=\"Friend Code\"\n              type=\"text\"\n              color=\"primary\"\n            />\n          </mat-form-field>\n          <button mat-raised-button color=\"accent\" class=\"btn-block\">\n            Update\n          </button>\n        </form>\n        <h2 *ngIf=\"!updatingFriendCode\" color=\"primary\">\n          {{ friendCode ? friendCode : 'Please set a friend code!' }}\n        </h2>\n      </div>\n      <div style=\"width: 55%; height: 100%; float: right\">\n        <button\n          *ngIf=\"!updatingFriendCode\"\n          class=\"friend-code-update-button\"\n          mat-icon-button\n          (click)=\"updatingFriendCode = true\"\n        >\n          <mat-icon>edit</mat-icon>\n        </button>\n        <button\n          *ngIf=\"updatingFriendCode\"\n          class=\"friend-code-cancel-button\"\n          mat-icon-button\n          (click)=\"updatingFriendCode = false\"\n        >\n          <mat-icon>cancel</mat-icon>\n        </button>\n      </div>\n    </mat-card>\n  </mat-grid-tile>\n  <mat-grid-tile colspan=\"1\" rowspan=\"1\">\n    <mat-card class=\"container\">\n      <h1>Add a friend:</h1>\n      <div style=\"width: 40%; height: 100%; float: left\">\n        <form (submit)=\"addFriend()\">\n          <mat-form-field class=\"formField\">\n            <input\n              matInput\n              class=\"inputField\"\n              name=\"friendCode\"\n              [(ngModel)]=\"addFriendCode\"\n              placeholder=\"Friend Code\"\n              type=\"text\"\n              color=\"primary\"\n            />\n          </mat-form-field>\n          <button mat-raised-button color=\"accent\" class=\"btn-block\">\n            Update\n          </button>\n        </form>\n      </div>\n    </mat-card>\n  </mat-grid-tile>\n</mat-grid-list>\n","import { Component, OnInit } from '@angular/core';\nimport { AuthenticationService, UserDetails } from '../authentication.service';\nimport { Stats, StatsService } from '../stats.service';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css'],\n})\nexport class HomeComponent implements OnInit {\n  user: UserDetails;\n  stats: Stats;\n\n  constructor(\n    private auth: AuthenticationService,\n    private statsService: StatsService\n  ) {}\n\n  ngOnInit(): void {\n    this.getUserDetails();\n  }\n\n  getUserDetails = () => {\n    this.auth.profile().subscribe(\n      (user) => {\n        this.user = user;\n        this.stats = this.statsService.getStats(user.bookList);\n      },\n      (err) => {\n        this.user = null;\n      }\n    );\n  };\n}\n","<div class=\"container\">\n  <mat-grid-list cols=\"3\" rowHeight=\"45%\">\n    <mat-grid-tile colspan=\"2\" rowspan=\"2\">\n      <div *ngIf=\"user\" style=\"position: absolute; left: 2%; top: 5%\">\n        <h1 style=\"padding-top: 1vh\">Welcome back, {{ user.name }}!</h1>\n        <!-- <h3 style=\"padding-top: 1vh\">\n        Are you still reading\n        <span style=\"font-style: italic\">The Power of Habit?</span>\n      </h3>\n      <button mat-raised-button color=\"primary\" style=\"padding-top: 1vh\">\n        You can update its entry here\n      </button> -->\n      </div>\n      <div *ngIf=\"!user\" style=\"position: absolute; left: 2%; top: 5%\">\n        <h1 style=\"padding-top: 1vh\">\n          Welcome to Book Hero, your complete solution for keeping track of and\n          sharing your book list!\n        </h1>\n      </div>\n    </mat-grid-tile>\n    <mat-grid-tile colspan=\"1\" rowspan=\"1\">\n      <mat-card style=\"height: 95%; width: 80%\" *ngIf=\"user\">\n        <h2>Stats</h2>\n        <h4 style=\"line-height: 12px\">Completed: {{ stats.completed }}</h4>\n        <h4 style=\"line-height: 12px\">Dropped: {{ stats.dropped }}</h4>\n        <h4 style=\"line-height: 12px\">On-hold: {{ stats.onHold }}</h4>\n        <h4 style=\"line-height: 12px\">Reading: {{ stats.reading }}</h4>\n        <h4 style=\"line-height: 12px\">Plan to read: {{ stats.planToRead }}</h4>\n        <h4 style=\"line-height: 12px\">Pages read: {{ stats.pagesRead }}</h4>\n        <h4 style=\"line-height: 12px\">\n          Average rating: {{ stats.averageRating }}\n        </h4>\n      </mat-card>\n    </mat-grid-tile>\n    <mat-grid-tile colspan=\"1\" rowspan=\"1\">\n      <mat-card style=\"height: 90%; width: 80%\" *ngIf=\"user\">\n        <h2>Friend Activity</h2>\n        <mat-card-content>\n          <h3>Coming soon!</h3>\n          <!-- <p>\n          John Doe is currently reading:\n          <span style=\"font-style: italic\"\n            >How to Win Friends and Influence People</span\n          >\n          ...\n        </p>\n        <p>\n          Bryan Horne is currently reading:\n          <span style=\"font-style: italic\">The Slight Edge</span>\n          by Jeff Olsen\n        </p>\n        <p>\n          Sally Johnson just finished:\n          <span style=\"font-style: italic\">The Art of War</span>\n          by Sun Tzu\n        </p> -->\n        </mat-card-content>\n      </mat-card>\n    </mat-grid-tile>\n  </mat-grid-list>\n</div>\n","import { Component } from '@angular/core';\nimport { AuthenticationService, TokenPayload } from '../authentication.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css'],\n})\nexport class LoginComponent {\n  credentials: TokenPayload = {\n    email: '',\n    password: '',\n  };\n\n  constructor(private auth: AuthenticationService, private router: Router) {}\n\n  login() {\n    this.auth.login(this.credentials).subscribe(\n      () => {\n        this.router.navigateByUrl('/profile');\n      },\n      (err) => {\n        console.error(err);\n      }\n    );\n  }\n}\n","<div class=\"form-wrapper\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n  <mat-card class=\"box\">\n    <mat-card-header>\n      <mat-card-title>Log in</mat-card-title>\n    </mat-card-header>\n\n    <form class=\"auth-form\" (submit)=\"login()\">\n      <mat-card-content>\n        <mat-form-field class=\"full-width\">\n          <input\n            matInput\n            type=\"email\"\n            class=\"\"\n            name=\"email\"\n            placeholder=\"Enter email\"\n            [(ngModel)]=\"credentials.email\"\n            placeholder=\"Email\"\n          />\n        </mat-form-field>\n\n        <mat-form-field class=\"full-width\">\n          <input\n            matInput\n            type=\"password\"\n            class=\"\"\n            name=\"password\"\n            placeholder=\"Password\"\n            [(ngModel)]=\"credentials.password\"\n            placeholder=\"Password\"\n          />\n        </mat-form-field>\n      </mat-card-content>\n      <button mat-stroked-button color=\"accent\" class=\"btn-block\" type=\"submit\">\n        Log in\n      </button>\n    </form>\n  </mat-card>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { AuthenticationService, UserDetails } from '../authentication.service';\n\n@Component({\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css'],\n})\nexport class ProfileComponent implements OnInit {\n  details: UserDetails;\n\n  constructor(private auth: AuthenticationService) {}\n\n  ngOnInit() {\n    this.auth.profile().subscribe(\n      (user) => {\n        this.details = user;\n      },\n      (err) => {\n        console.error(err);\n      }\n    );\n  }\n}\n","<div class=\"form-wrapper\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n  <mat-card class=\"box\">\n    <mat-card-header>\n      <mat-card-title>Your Profile</mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n      <br />\n      <mat-action-row>\n        <h3>Full name</h3>\n        <p>{{ details?.name }}</p>\n      </mat-action-row>\n      <br />\n      <mat-action-row>\n        <h3>Email</h3>\n        <p>{{ details?.email }}</p>\n      </mat-action-row>\n    </mat-card-content>\n  </mat-card>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { AuthenticationService, TokenPayload } from '../authentication.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css'],\n})\nexport class RegisterComponent implements OnInit {\n  credentials: TokenPayload = {\n    email: '',\n    name: '',\n    password: '',\n  };\n\n  constructor(private auth: AuthenticationService, private router: Router) {}\n\n  ngOnInit() {}\n\n  register() {\n    this.auth.register(this.credentials).subscribe(\n      () => {\n        this.router.navigateByUrl('/profile');\n      },\n      (err) => {\n        console.error(err);\n      }\n    );\n  }\n}\n","<div class=\"form-wrapper\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n  <mat-card class=\"box\">\n    <mat-card-header>\n      <mat-card-title>Register</mat-card-title>\n    </mat-card-header>\n\n    <form class=\"auth-form\" (submit)=\"register()\">\n      <mat-card-content>\n        <mat-form-field class=\"full-width\">\n          <input\n            matInput\n            type=\"text\"\n            class=\"\"\n            name=\"name\"\n            placeholder=\"Enter your name\"\n            [(ngModel)]=\"credentials.name\"\n          />\n        </mat-form-field>\n\n        <mat-form-field class=\"full-width\">\n          <input\n            matInput\n            type=\"email\"\n            class=\"\"\n            name=\"email\"\n            placeholder=\"Enter email\"\n            [(ngModel)]=\"credentials.email\"\n          />\n        </mat-form-field>\n\n        <mat-form-field class=\"full-width\">\n          <input\n            matInput\n            type=\"password\"\n            class=\"\"\n            name=\"password\"\n            placeholder=\"Password\"\n            [(ngModel)]=\"credentials.password\"\n          />\n        </mat-form-field>\n      </mat-card-content>\n\n      <button mat-stroked-button color=\"accent\" class=\"btn-block\">\n        Register\n      </button>\n    </form>\n  </mat-card>\n</div>\n","import { Injectable } from '@angular/core';\nimport { Book, BookListEntry } from './booklist/book';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StatsService {\n  constructor() {}\n\n  public getStats(bookList: BookListEntry[]): Stats {\n    return {\n      completed: bookList.filter((entry) => entry.status == 'Completed').length,\n      dropped: bookList.filter((entry) => entry.status == 'Dropped').length,\n      onHold: bookList.filter((entry) => entry.status == 'On-hold').length,\n      reading: bookList.filter((entry) => entry.status == 'Reading').length,\n      planToRead: bookList.filter((entry) => entry.status == 'Plan to read')\n        .length,\n      pagesRead: this.getPagesRead(bookList),\n      averageRating: this.getAverageRating(bookList),\n    };\n  }\n\n  private getPagesRead(bookList: BookListEntry[]): number {\n    var total = 0;\n    bookList.forEach((entry) => (total += entry.currentPageCount));\n    return total;\n  }\n\n  private getAverageRating(bookList: BookListEntry[]): string {\n    if (bookList.filter((entry) => entry.rating).length == 0)\n      return 'Nothing has been rated';\n\n    var totalRating = 0;\n    var numberOfRatings = 0;\n\n    bookList.forEach((entry) => {\n      if (entry.rating) {\n        totalRating += entry.rating;\n        numberOfRatings++;\n      }\n    });\n\n    return (Math.round((totalRating / numberOfRatings) * 100) / 100).toFixed(2);\n  }\n\n  init(): Stats {\n    return {\n      completed: 0,\n      dropped: 0,\n      onHold: 0,\n      reading: 0,\n      planToRead: 0,\n      pagesRead: 0,\n      averageRating: '0',\n    };\n  }\n}\n\nexport interface Stats {\n  completed: number;\n  dropped: number;\n  onHold: number;\n  reading: number;\n  planToRead: number;\n  pagesRead: number;\n  averageRating: string;\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-timeline',\n  templateUrl: './timeline.component.html',\n  styleUrls: ['./timeline.component.scss']\n})\nexport class TimelineComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"container\">\n  <div class=\"wrapper\">\n    <h1>Timeline Page Coming Soon<span class=\"dot\">.</span></h1>\n  </div>\n</div>\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AuthenticationService } from './authentication.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UsersService {\n  constructor(private http: HttpClient, private auth: AuthenticationService) {}\n\n  public getUser(id: number): Observable<any> {\n    return this.http.get('api/users/' + id.toString());\n  }\n\n  public addFriend(friendCode: string): Observable<any> {\n    return this.http.post(\n      'api/users/add-friend',\n      { friendCode: friendCode },\n      {\n        headers: { Authorization: `Bearer ${this.auth.getToken()}` },\n      }\n    );\n  }\n\n  public updateFriendCode(friendCode: string): Observable<any> {\n    return this.http.post(\n      'api/users/set-friend-code/',\n      {\n        friendCode: friendCode,\n      },\n      {\n        headers: { Authorization: `Bearer ${this.auth.getToken()}` },\n      }\n    );\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.error(err));\n"]}